VERSION=1.0.9
#lazyload=syncDirs,awkWrapper,getfullpath,getpath,getext,getfilename,isDir,isEmptyDir,box,ddiff,syncFile

alias fullpath='getfullpath'
alias full='getfullpath'

[[ -v comp ]] || typeset -ga comp

setopt nomultios

function cdhere()
{
	local here=$(here 2) && cd $here || abort 127 "Could not find directory: $here"
}

function here()
{
	local fp
	include -lq file
	fp=$(getfullpath $(explode "$funcfiletrace[${1:-1}]" ':' 1)) || abort 127 "File not found: $fp"
	getpath $fp
}
# (#ia1) allow 1 error
function getfilename()
{
	local opt name
	zparseopts -D -M -A opt - 'p:' -prefix:=p
	if (($+opt[-p])); then
		name=("${@:t}")
		echo ${opt[-p]}${(@)^name#${prefix}*}
	else
		echo "${@:t}"
	fi
}

function getfullpath()
{
	local relative
	zparseopts -D - r:=relative
	(( $# )) || return 1
	[[ -n $relative ]] && type realpath >/dev/null &&
		realpath --relative-base=${relative[2]#=} $1 2>/dev/null || echo "${(z)1:P}"
}
function getpath()
{
	echo "${1:h}"
}

function getext()
{
	local _opts
	zparseopts -D -M -A _opts - 'a' -all=a n:
	# TODO: specify how many suffixes to get (example: -n 3)

	(($+_opts[-a])) && { echo "${f#.*}"; return }
	# echo "${1##*.}"
	echo "${1:e}"
}

function getfilenoext()
{
	echo "${1:t:r}"
}

function isDir()
{
	local dir mk
	[[ $1 = -m ]] && { mk=1; shift }
	dir=$1
	if [[ ! -d $dir ]]; then
		if [[ -e $dir ]]; then
			techo -c err "$dir is a file."
			return 2
		fi
		[[ -z $mk ]] && return 1
		if confirm "dir $dir doesn't exist. Create"; then
			run -S mkdir -p $dir
		else
			return 130
		fi
	fi
}

function isEmptyDir()
{
	local glob=("$1"(N/F))
	[[ -z $glob ]]
}

# @description: remove extension
# @arg2: optional extension. If given, remove only specifc extension
# @returns: full path (or filename if no path given) without extension
function noext()
{
	local _opts
	zparseopts -D -M -A _opts - 'a' -all=a n:

	if (($+_opts[-a])); then  # strip all suffixes
		echo "${f%%.*}"
		return
	fi

	if [[ -n $2 ]]; then
		echo "${1%%.$2}"
	else
		echo "${1:r}"
	fi
}

# Added 2019-04-15 18:36 @TODO
function replace()
{
	local s r
	s=$1 ; r=$2 ; shift 2
	sed -i bak -e s/$1/$2/g "$@"
}

#@TODO
function backup()
{
	local sudo=""
	[[ "$1" == "-s" ]] && { shift; sudo='-s' }
	[[ -n "$2" ]] && {
		run $sudo cp "$1" "$2/$(getfilename "$1").bkup"
	} || run $sudo cp "$1" "$1.bkup"
}

function del()
{
	local f
	for f do
		if [[ -d $f ]]; then
			confirm "Delete $C[lred]dir$C_ $f" && {
				techo -c lred "Removing dir $f"
				rm -rf $f
			}
		elif [[ -f $f ]]; then
			confirm "Delete$C_ $f" && {
				techo -c lred "Removing $f"
				rm -f $f
			}
		fi
	done
}
#@TODO
function rename()
{
	local orig name dir fullpath sudo
	(( $# )) || usage $0
	#@TODO is link? confirm rename link or link target
	[[ "$1" == '-s' ]] && { shift; sudo='-s' }
	orig="$(getfilename "$1")"
	dir="$(getpath "$(getfullpath $1)")"
	fullpath="$dir/$orig"
	if [[ -n $sudo ]]; then
		sudo zsh -c "[[ -f '$1' || -d '$1' ]]" || abort 127 "$1 doesn't exist"
	else
		[[ -f "$1" || -d "$1" ]] || abort 127 "$1 doesn't exist or no file permission"
	fi
	name=${2:-$orig}
	if input -r -p "Rename \"${C[warn]}$fullpath${C[head]}\" to" -v name && \
		[[ -n $name && $name != $orig ]]
	then
		run $sudo mv "$fullpath" "$dir/$name"
	fi
}

function ddiff()
{
	local list cmd file sudo config var _dopts r u q
	typeset -a _ropts _dopts

	zparseopts -D -M - c=config -set=c l=list s=sudo i:=ignore q=q

	if [[ -z $config ]] && (($#==2)) && [[ -d $1 && -d $2 ]]; then
		config=1
	else
		echo "dir1=$dir1\ndir2=$dir2"
		[[ -n $list ]] && return 0
	fi

	_dopts=(-u -r)
	[[ -n $q ]] && _dopts+=($q)

	if [[ -n $config || -z $dir1 || -z $dir2 ]]; then
		if [[ -n $config ]]; then
			if [[ -n $1 ]]; then
				isDir $1 && dir1=${1%/} || return
				shift
			fi
			if [[ -n $1 ]]; then
				isDir $1 && dir2=${1%/} || return
				shift
			fi
		fi
		local buttons=(--okcodes '0 1' -b "Current directory [$PWD]:1")
		if [[ -z $dir1 || -n $config ]]; then
			var=$dir1
			input -p "Dir 1" -v var $buttons || return
			isDir -m $var && dir1=$var || return
		fi
		if [[ -z $dir2 || -n $config ]]; then
			var=$dir2
			input -p "Dir 2" -v var $buttons || return
			isDir -m $var && dir2=$var || return
		fi
		d1=$dir1; d2=$dir2
		techo "dir1: $dir1\ndir2: $dir2"
	fi

	cmd=()
	if [[ -d $dir1 && -d $dir2 ]]; then
		if [[ -n $1 ]] && type $1 >/dev/null; then
			cmd=($1)
			shift
		fi
		if ((! $#cmd)); then
			cmd=(diff $_dopts)
		elif (($#>1)); then
			integer i=${@[(ie)--]}
			cmd+=("$@[1,i-1]")
			shift $#cmd
			#args=("$@[i+1:-1]")
		fi
		if [[ -n $1 ]]; then
			#@TODO
			# for f in files
			# cnd iots $dir1/$f $dir2/$f
			_dargs=($dir1/$1 $dir2/$1)
		else
			_dargs=($dir1 $dir2)
		fi
		#@TODO add pager option to run()
		#@TODO add no-pager option to ddiff
		[[ "$cmd[1]" =~ 'diff|grep' ]] && _ropts+=('-N1')
		run $_ropts $sudo -v3 -p "$cmd $_dargs" $cmd $_dargs #| $PAGER
	fi
}

typeset -A rsyncCodes=(
	1 'Syntax or usage error'
	2 'Protocol incompatibility'
	3 'Errors selecting input/output files, dirs'
	4 'Requested action not supported: an attempt was made to manipulate 64-bit files on a platform that cannot support them; or an option was specified that is supported by the client and not by the server.'
	5 'Error starting client-server protocol'
	6 'Daemon unable to append to log-file'
	10 'Error in socket I/O'
	11 'Error in file I/O'
	12 'Error in rsync protocol data stream'
	13 'Errors with program diagnostics'
	14 'Error in IPC code'
	20 'Received SIGUSR1 or SIGINT'
	21 'Some error returned by waitpid()'
	22 'Error allocating core memory buffers'
	23 'Partial transfer due to error'
	24 'Partial transfer due to vanished source files'
	25 'The --max-delete limit stopped deletions'
	30 'Timeout in data send/receive'
	35 'Timeout waiting for daemon connection'
)

function syncFile()
{
	local file=$1
	local base=$(git root)
	croot
	local projName=$(basename $PWD)
	syncDirs -cf $file 192.168.10.11:$projName/$file
}

# Added 2019-05-03 16:50
comp+=("syncDirs=rsync")
function syncDirs()
{
	integer n cod
	local dir data checksum arg noDelete
	local quiet sudo excludeFrom exclude dry reverse
	local stat name noSlash sshCFG ret host p _copts
	typeset -aU _opts src targets rsArgs extraArgs files excludePatterns
	zparseopts -D -M -A _opts - q=quiet s=sudo d=dry 'R' -relative=R 'z' -compress=z \
		c=checksum -reverse=reverse -no-add-slash=noSlash -no-delete=noDelete \
		E:=excludeFrom -exclude-from:=E e:=exclude -exclude:=e -port: \
		-no-perms -no-user -no-group f=dontAsk

	[[ -z "$sudo" ]] && sudo='-S'
	(($# >= 2)) || abort 1 "usage: $0 source1 [.. sourceN] target1[,target2]"

	n=$#
	for arg; do
		if [[ ${arg:0:1} = - ]]; then # option parameter
			extraArgs+=($arg)
		else # sources
			src+=("$arg[@]")
		fi
	done
	if [[ $#src -ge 2 ]]; then
		explode -v targets $src[-1] ','
		src[$#src]=()
	fi
	#if [[ $#src -eq 0 ]]; then
	#	src=($(box get backupconfig))
	#fi
	if ((!$#targets)); then
		#@TODO: show current selected directories and allow addition and removal
		local buttons=(--okcodes '0 1' -b "Current directory [$PWD]:1")
		input --multi --dir -p 'Enter target directories' -v targets || cancel
	fi

	if [[ -n $reverse ]]; then
		files=($targets)
		targets=($src)
		src=($files)
	fi

	# # # # # # # # # #	   -t, --times           preserve modification times
	# rsync arguments #    -O, --omit-dir-times  omit directories from --times
	# # # # # # # # # #    -J, --omit-link-times
	rsArgs=( -hlDr )
	if [[ -n $checksum ]]; then
		rsArgs+=(-c --no-times)
	else
		rsArgs+=(-tu)
	fi
	(($+_opts[-R])) && rsArgs+=(--relative)
	(($+_opts[-z])) && rsArgs+=(-z)
	(($+_opts[--port])) && rsArgs+=(-e "ssh -p $_opts[--port]")

	# analyse sources
	for ((n=1; n<=$#src; n++)); do
		local isEmptyDir=0

		dir=$src[$n]
		if [[ $dir =~ ([^:]+):(.*) ]]; then		 # remote
			host=$match[1]
			p=$match[2]

			#include -q network
			#if [[ -n $sshCFG[$host] ]]; then
			#	sshArgs=(ssh $sshCFG[$host])
			#fi

			#ret=($(ssh $host \
			#	"if [[ -d $p ]]; then
			#		glob=("$p"(N/F))
			#		v=\$#glob
			#		if ((v)) && [[ -f $p/rsync.ignore ]]; then
			#			echo -n 1i
			#		else
			#			echo -n \$v
			#		fi
			#	elif [[ -f $p ]]; then
			#		echo -n f
			#	fi"
			#))
			#case $ret in
			#	1*) # dir
			#		((!$#noSlash)) && [[ ${dir: -1} != / ]] && src[$n]+='/'
			#		if [[ $ret == '1i' ]]; then
			#			#@TODO: scp $dir/rsync.ignore /tmp)
			#			#rsArgs+=(--exclude-from=$fIgnore)
			#		fi
			#		;;
			#	f) ;; # file
			#	0)
			#		confirm -c warn "@TODO Empty remote directory$C_: '$C[lred]$host:$p$C_'. Create dir" || cancel
			#		src[$n]=(); ((n--))
			#		;;
			#	'')
			#		confirm -c warn "Source '$C[lred]$host:$p$C_' not found. Ignore and continue" || cancel
			#		src[$n]=(); ((n--))
			#		;;
			#	*) abort 1 "Invalid response from $host: '$C[lred]$ret$C_'" ;;
			#esac
		elif [[ -d $dir ]]; then
			if isEmptyDir $dir; then
				confirm -c warn "Empty directory$C_: '$C[lred]$dir$C_'. Ignore and continue" || cancel
				src[$n]=(); ((n--))
			else
				((!$#noSlash)) && [[ ${dir: -1} != / ]] && src[$n]+='/'
				if [[ -f $dir/rsync.ignore ]]; then
					excludePatterns+=("${(@f)$(< $dir/rsync.ignore)}")
				fi
			fi
		fi
	done

	# exclusions
	if [[ -n $exclude ]]; then
		explode -v exclude $exclude[2] ','
		excludePatterns+=($exclude)
	fi
	[[ -n $excludeFrom ]] && excludePatterns+=("${(@f)$(egrep -v '^ *#' $excludeFrom[2])}")
	#(--exclude-from="${excludeFrom[2]}")
	excludePatterns+=('backup*' '*.local' '.git' 'node_modules')
	if [[ -z $dontAsk ]]; then
		chooser -v excludePatterns --multi --selected "$excludePatterns" $excludePatterns
		cod=$?
		if ((cod && cod!=10)); then
			confirm 'Cancel' && cancel
		fi
	fi
	# Parameter Expansion -> $^ RC_EXPAND_PARAM
	(($#excludePatterns)) && rsArgs+=(--exclude=$^excludePatterns)

	techo -c lcyan "Sources: ${(@qq)src}"
	techo -c lcyan "Targets: ${(@qq)targets}"
	# rsync arguments from command line
	rsArgs+=($extraArgs)
	techo -c lcyan "rsync args: ${(@qq)rsArgs}"

	# # # # # #
	# Targets #
	# # # # # #
	local nothing=1 permFlags
	for dir in $targets; do
		host=''; p='' #sshArgs
		if [[ $dir =~ ([^:]+):(.*) ]]; then
			host=$match[1]; p=$match[2]
		elif ! isDir -m $dir; then
			#techo -c warn "Skipping $dir"
			#continue
			abort $? 'Error creating $dir'
		fi

		permFlags=''
		#if (($#host)); then # remote
		#	permFlags='-p' # og'
		#else
		#	[[ "$(fstypeof $dir)" != 'vfat' ]] && permFlags='-p' #og'
		#fi
		#data="$(run $sudo rsync -ni ${sshArgs[@]} ${rsArgs[@]} $permFlags "$src[@]" $dir)"
		data="$(run $sudo rsync -ni ${rsArgs[@]} $permFlags "$src[@]" $dir)"
		cod=$?
		if ((cod)); then
			techo $rsyncCodes[$cod]
			return $cod
		fi
		if (($#data)); then
			nothing=0
			echo $data
			if [[ -n $dontAsk ]] || confirm "Do it"; then
				run $sudo rsync --info=PROGRESS2 $rsArgs $permFlags "$src[@]" $dir ; cod=$?
				if ((cod)); then
					techo $rsyncCodes[$cod]
					return $cod
				fi
			else
				cancel
			fi

			# @TODO((!isRemote && !noSync)) && _sync
		fi

		if ((!$#noDelete)); then
			# # # # # # #
			# Deletions #
			# # # # # # #  @TODO: -J (omit-link-times) does not work on old rsync
			data="$(run $sudo rsync -ni --delete --existing --ignore-existing -O ${rsArgs[@]} \
				"$src[@]" $dir)"; cod=$?
			if ((cod)); then
				techo $rsyncCodes[$cod]
				confirm 'Cancel' && cancel
				continue
			fi
			if [[ -n "$data" ]]; then
				nothing=0
				n=0
				files=()
				echo $data | while read stat name; do
					files+=($dir/$name)
					((n++))
				done

				_copts=(
					-v keepFiles -f1 --head "$C[warn]Deletions:" \
					--no-auto-select --multi --selected "$files" \
					--marks $'0:ok:\u2714:Keep,1:red:\u274C:Delete' \
					--foot "These files are only on \"$dir\""
				)
				chooser $_copts "$files[@]"; cod=$?
				if ((cod)); then
					((cod==10 || cod==130)) && continue
					confirm 'Cancel' && cancel
				fi

				run $sudo rsync --delete --existing --ignore-existing --info=PROGRESS2 $rsArgs \
					--exclude=$^keepFiles $src $dir ;
				cod=$?
				if ((cod)); then
					techo $rsyncCodes[$cod]
					return $cod
				fi
				_sync
			fi
		fi
	done
	[[ $nothing -eq 1 ]] && techo -c cyan "Nothing to do"
	return 0
}
function sshdiff()
{
	local file base
	file=$1
	base=$(basename $PWD)
	ssh 192.168.10.11 "cat $base/$file" | diff -u - $file
}
function boxconfig()
{
	local cfgfile arg val opts _var
	zparseopts -D -M -A opts - a -all=a v:=_var
	cfgfile='.box.cfg.json'
	arg=$1
	if [[ -f $cfgfile ]]; then
		val="$(jq -rc "$arg | @sh" < $cfgfile)" || return $?
		explode -v $_var[2] -z $val
	fi
	#if [] && explode -v val -z $val; then
		#explode -z -v initCmd $initCmd
}

# Added 2019-02-20 09:23:39 @TODO
function box()
{
	local box base=$HOME/repos cmd search list _opts
	#zparseopts -D -M -
	include -r functions
	include -l network
	#include 'boxes

	zparseopts -D -M -A _opts - a -all=a

	if (($#)); then
	#	[[ $1 == 'cd' ]] && shift &&
		cmd=$1 ; shift ; box="$*"
	else
		cmd='search'
		box="$@"
	fi

	while ((1)); do
		case $cmd in
			new)
				if [[ -z $box ]]; then
					input -v box -p 'Enter git url or name to search' || cancel
				fi
				gclone $box #&& BOX=$box
				return
				#mkdir $base/$box
			;;
			open)
				if [[ $box == '.' ]]; then
					 box=$BOX
				fi
				cd $base/$box || return
				local initCmd initList=()
				BOX=$box
				if boxconfig -v initList '.cmd.init'
				then
					for initCmd in $initList; do
						#run -z "$initCmd"
						explode -z -v initCmd $initCmd
						run "$initCmd[@]"
					done
				fi
				[[ -d .git ]] && gstatus &
				[[ -d android ]] && include android
				todo -d . #@TODO mv to cd hook
				return 0
			;;
			start|run)
				#@TODO
				if [[ -z $box ]]; then
					[[ -n $BOX ]] || abort 10
					box=$BOX
				else
					#@TODO: glob search name, if count==1 box=result
					result=($base/(#i)*${box}*)
					(($#result)) || abort 10
					chooser -v box $result:t || cancel
				fi
				if [[ -d $base/$box/node_modules ]]; then
					(cd $base/$box ; npm start)
				fi
				return
			;;
			list|search)
				(($#VSCODE_ZDOTDIR || $#NOBOX)) && return 0 # ignore vscode
				search=$box
				if [[ -n $search && -d $base/$search ]]; then
					cmd='open'; box=$search
					continue
				fi
				integer num
				if (($+_opts[-a] || $#search)); then
					num=-1 # [1,-1] => all
				else
					num=20
				fi
				list=($base/*(-/omN[1,num]))
				(($#list)) || return 10
				chooser -v box -f1 ${=box:+-S $search} $list:t 'New box' || cancel
				if [[ $box == 'New' ]]; then
					cmd='new' ; box=''
				elif [[ -d $base/$box ]]; then
					cmd='open'
				fi
			;;
			*)
				box=$cmd
				cmd='search'
				#abort -v5 1 "Invalid command: $C[warn]$cmd$C_. Commands: open, list/search, new, start"
			;;
		esac
	done
}

# Added 2019-06-05 16:55
function attributeSync()
{
	local stats name dir1 dir2 rsArgs skip dry
	#[[ $# -gt 2 ]] || return 10
	zparseopts -D - d=dry

	[[ -n $dry ]] && dry=techo
	[[ -n $1 ]] && { dir1=$1 ; shift }
	[[ -n $1 ]] && { dir2=$1 ; shift }

	if [[ ! -d $dir1 || ! -d $dir2 ]]; then
		[[ -d $dir1 ]] || techo -c lred "$dir1: not a directory"
		[[ -d $dir2 ]] || techo -c lred "$dir2: not a directory"
		return 127
	fi
	confirm "$dir1 -> $dir2" || return
	rsArgs=(${@:-'-u'})
	while read stats name skip; do
		#echo stat=$stats name=$name ;
		#[[ $stats == skipping ]]
		[[ $stats[5] == t ]] && $dry sudo touch --reference "$dir1/$name" $dir2/$name
		[[ $stats[6] == p ]] && $dry sudo chmod --reference "$dir1/$name" $dir2/$name
		if [[ $stats[7] == o || $stats[8] == g ]] && [[ $stats != skipping ]]; then
			$dry sudo chown --reference "$dir1/$name" $dir2/$name
		fi
	done < <(run -s rsync -n -hDirt -pog $rsArgs $dir1/ $dir2 | tee $TTY)
	#@TODO -p perms -o owner -g group : make these optional throw an option
	_sync
}

#@TODO
function _sync() {
	#run -w "isDirty" -p "Flushing caches to disk. Please wait." sync
	run -p "Flushing caches to disk..." sync
	#watch -n 1 -c -t "grep -e 'Dirty:' -e 'Writeback:' /proc/meminfo; kill -0 $pid || killall watch"
}

# Added 2019-08-21 00:27
function fordir() #TODO
{
	local d cmd args dirs i=1 verbose
	zparseopts -D -M - v:=verbose
	[[ $# -gt 0 ]] || usage
	if ((! $+verbose[2])); then
		verbose=(-v 0)
	fi
	for d; do
		if [[ -d "$d" ]]; then
			dirs+=("$d")
		elif type "$d" 2>&1 >/dev/null; then
			cmd="$d"
			shift
			break
		fi
		shift
	done
	[[ -n $cmd ]] || usage 'Missing command'
	args=("$@")
	[[ -n "$dirs" ]] || dirs=(*(-/))
	for d in $dirs; do
		run $verbose "$cmd" $args "$d"
	done
}

# Added 2019-06-07 17:27
function fordo() #TODO
{
	techo FIXME
	local v cmd
	cmd=$1; shift
	for v; do
		run -e - $=cmd $v
	done
}

function show() #TODO
{
	local cmd
	type bat 2>&1 >/dev/null && cmd='bat' || cmd='cat'
	$cmd "$@"
}

# Added 2019-11-05 23:25
function diff()
{
	command diff --color=always "$@"
}

function uniqfile()
{
	local suffix prefix name base
	zparseopts -D -M - S:=suffix P:=prefix
	[[ -n $prefix ]] && prefix=$prefix[2]
	[[ -n $suffix ]] && suffix=.${suffix[2]#.}
	if (($#1)); then
		base=$1
		[[ -n $prefix ]] && base=${base#$prefix}
		if [[ -n $suffix ]]; then
			base=${base%$suffix}
		else
			suffix=.${base:e}
		fi
	fi
	name="$prefix$base$suffix"
	if [[ -z $name ]]; then
		techo 'empty filename'
		return 1
	fi
	if [[ -e $name ]]; then
		name="$prefix$base$(date +"%Y%m%d-%H%m%S")$suffix"
	fi
	echo -n $name
}

typeset -gA awkFuncs
awkFuncs=(
	printArgs '(i,f) {\
		if (i<0) i=NF+i+1; 	if (f<0) f=NF+f+1;\
		for (j=i ; j<f ; j++) {\
			printf("%s%s", $j, OFS);\
		}\
		if (j==f) print $j; }'
	printArray '(A,i,f){\
		if (i<0) i=length(A)-i+1; 	if (f<0) f=length(A)-f+1;\
		for (j=i ; j<f ; j++) {\
			printf("%s%s", A[j], OFS);\
		}\
		if (j==f) print A[j]; }'
)

function awkWrapper()
{
	_dbg_trap $0
	local opts prog _vars _expr _out _inc reSep
	local _mapCols _cols
	zparseopts -D -M - v:=_vars F:=reSep E=_expr e:=_expr o:=_out \
		I:=_inc -inc:=I C:=_mapCols -mapColumns:=C # c:=_cols -cols:=c

	if [[ -n $_vars ]]; then
		_vars=(${(P)_vars[2]})
		opts=('-v '$^_vars)
		opts=($=opts)
	fi
	(($#reSep)) && opts+=($reSep)

	prog=''
	if (($#_inc)); then #@TODO
		local fname=$_inc[2]
		((${+awkFuncs[$fname]})) || abort 127 "Undefined function $C[warn]$fname"
		prog+="function ${fname}${awkFuncs[$fname]}"$'\n'
	fi

	if (($#_expr)); then
		if (($#_expr > 1)); then	# -e varname
			_expr=(${(P)_expr[2]})
		else						# -E
			_expr=("$@[1,4]")
		fi
		local x m pat action
		for x pat m action in $_expr; do
			if [[ $x == <-> ]]	; then
				prog+="x==$x"
			elif [[ $x =~ 'BEGIN|END' ]]; then
				prog+="$x { $action }"$'\n'
				continue
			elif [[ $x == 'function' ]]; then
				prog+="function $action"$'\n'
				continue
			elif [[ $x != '-' ]]; then
				prog+=$x
			fi

			if [[ $pat != '-' ]]; then
				if [[ $x != '-' ]]; then
					prog+=' && '
				fi

				if [[ $m != '-' ]]; then
					prog+="match(\$0,$pat,$m)"
				else
					prog+=$pat
				fi
			fi

			prog+=" { $action }"$'\n'
		done
	fi

	if (($#_out)); then
		_out=$_out[2]
		if (($#_mapCols)); then
			local key val
			_mapCols=$_mapCols[2]
			typeset -g $_out $_mapCols
			typeset -A _row
			while read key val; do
				(($#key)) || break
				col=${${(P)_mapCols}[$key]}
				[[ -z $col ]] && abort 1 "Invalid column: $key"
				_row+=($col $val)
			done < <(awk $opts $prog $1)
			set -A $_out ${(kv)_row}
		elif (($#_cols)); then
			_cols=$_cols[2]
			typeset -ga $_out $_cols
			_row=()
			{
				integer i=0
				read -A $_cols
				IFS=$'' read -d '' -A $_out
				#while read ... $_out; do
					#col=${${(P)_cols}[$key]}
					#[[ -z $col ]] && abort 1 "Invalid column: $key"
					#_row+=($col $val)
				#	_row+=($col $val)
				#	((i++))
				#done
			} < <(awk $opts $prog $1)
		else
			#save line by line to array
			set -A $_out "${(@f)$(awk $opts $prog $1)}"
		fi
	else
		# raw awk output to stdout
		awk $opts $prog $1
	fi
}

function open()
{
	xdg-open "$@" & sleep 1
}

# Added 2020-04-06 23:53
# Just like the --relative-base option from realpath
# Usage: relpath <file|dir> <relative_base>
# Exs:
# relpath /home/user/repo/API /home/user/repo/API/v6 ; # gives: v6
function relpath()
{
	python -c 'import os, sys; print(os.path.relpath(*sys.argv[1:]))' $2 $1
}

# Added 2020-05-09 01:23
# backup
# restore
# remove
# disable=[backup,] remove
# purge
function apt-source()
{
	local f _opts _copts code bkup_suffix='.save' choices
	integer saved disable purge backup

	zparseopts -D -M -A _opts - 'd' -disable=d 'r' - -delete=r 'p' -purge=p -no-backup

	code=${1:-$(lsb_release -sc)}

	choices=('cancel')
	for f in *$code.list *$code.list; do
		name=${f%%$code.list}
		if [[ -f $f.save ]]; then
			if cmp $f $f.save; then
				techo "$OK $f $C[ok]==$C_ $f.save"
				saved=1
			else

				diff -u $f $f.save
				if (($+_opts[-d])); then
					choices+=("remove $f (keep $f.save)")
					choices+=("remove $f => $f.save")
				else
					choices+=("remove $f (use $f.save)") ||
				fi
			fi
		else
			if (($+_opts[-d] && $+_opts[--no-backup]==0)); then
			fi
			_copts=("overwrite $f => $f.save")
			_copts=("remove $f")
			_copts=("rename $f (keep $f.save)")
		fi

		chooser -v choice -f1 $_copts
		case $choice in
			(b*) sudo cp $f $fsave ;;   # backup
			(d*) sudo cp $f $fsave ;;   # disable
			(pur*) sudo rm $f $fsave ;;  # purge
			(res*) sudo cp $fsave $f ;;  # restore
			(rem*) sudo rm $f ;;
			(ren*) rename -s $f $fsave ;;
			(*) techo Invalid choice ;;
		esac
	done
}
