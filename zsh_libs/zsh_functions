VERSION=1.0.9
#lazyload=run,input,chooser,confirm,todo,chkCmd,pizza

#@TODO check i it's the top shell, and i it is, don't exit, just return: [[ $- =~ m ]] || EXIT=1
#		echo $ZSH_EVAL_CONTEXT
#		echo $SHLVL

autoload throw catch
setopt extendedglob pipefail nomultios 2>/dev/null
alias error="alert -e"
alias success="alert"

typeset -gA COLORS
COLORS=(
	 black 30  red 31  green 32  yellow 33  blue 34  magenta 35  cyan 36 lgray 37
	dkgray 90 lred 91 lgreen 92 lyellow 93 lblue 94 lmagenta 95 lcyan 96 white 97
	 bgblack  40  bgred  41  bggreen  42  bgyellow  43  bgblue  44  bgmagenta  45  bgcyan  46 bglgray  47
	bgdkgray 100 bglred 101 bglgreen 102 bglyellow 103 bglblue 104 bglmagenta 105 bglcyan 106 bgwhite 107
)

typeset -gA C
C=(
	head "[${COLORS[lblue]}m"
	err "[1;${COLORS[bgred]}m"
	red "[${COLORS[red]}m"
	lred "[${COLORS[lred]}m"
	ok "[${COLORS[lgreen]}m"
	warn "[${COLORS[lyellow]}m"
)
C_="[0m"

function colorSet()
{
	local c=$COLORS[${2:-$1}]
	[ -n "$c" ] && C[$1]="[${c}m" || return 1
}

CANCEL=" ${C_}[${C[warn]}CANCE$C_]"
FAIL=" ${C_}[${C[err]}FAIL$C_]"
OK=" ${C_}[${C[ok]}OK$C_]"

# like grep with optional 'cut -fN'
# regex pattern [Nfield]
function regex {
	gawk 'match($0,/'$1'/, ary) {print ary['${2:-'0'}']}'
}

# --okcodes button codes
# --bcb button callback - cb args: ret str buttons
#@TODO: gxmessage returns 1 on ESC... why?
function input()
{
	local _var _opts p gui z c title raw _buttons okcodes tmp
	local args str current gx cb cprompt
	integer ret
	zparseopts -M -D -A _opts - c: p:=p v:=_var I: -save-index:=I D:=current \
		g=gui z=z t:=title r=raw -clear-buffer \
		b:=_buttons -buttons:=b -bcb:=cb N:=okcodes -okcodes:=N

	# [[ -t

	typeset -A buttons=(Cancel 130 Ok 0)
	if (($#_buttons)); then
		explode -A':' -v _buttons $_buttons[2] ','
		buttons+=(${(kv)_buttons})
		(($#cb)) && cb=cb[2]
	fi

	if (($#okcodes)); then
		okcodes=($=okcodes[2]) #@TODO also split on comma
	fi

	p=${p[2]:-Input text}
	title=$title[2]:-Input} # window title
	if (($#_var)); then
		_var=$_var[2]
		typeset -g $_var
		str=${@:-${(P)_var}}
	else
		str="$@"
	fi

	if (($+_opts[--cprompt])); then
		cprompt=$_opts[--cprompt]
		p=$(stripcolors $cprompt)
	elif [[ $p[-1] != ' ' ]]; then # if last char is not a space
		c=${_opts[-c]:-head}
		cprompt=$C[$c]$p"$C_: "
	fi

	{
#		if [[ -n $DISPLAY && -z $raw ]] && type gxmessage >/dev/null && ; then
		if [[ -t 0 && -c $TTY ]]; then
			#print "${(k)buttons}: "
			(($+_opts[--clear-buffer])) && clearBuffer
			if [[ -o zle ]]; then
				# @bug vared -p $cprompt -e str # not working with prompt and read at same line
				techo $cprompt
				vared -e str
			else
				techo $cprompt
				read -r str
			fi
		elif [[ -n $DISPLAY ]]; then
			type gxmessage >/dev/null || chkCmd gxmessage
			local colors=(-fg white -bg black)
			gx=1
			techo -n $cprompt
			args=($colors -name name -center -ontop -wrap -buttons "$(implode -A':' buttons ',')")
			str=$(gxmessage $args -title "$title" -entrytext "$str" "$p")
			#@ is returning 1, should be ok, but empty str, but since code is 1, we can manually set str
		else
			abort 127 'No X or terminal attached'
		fi
		ret=$?
	} always {
		if catch '*'; then ret=$CAUGHT; fi

		in_array -v tmp $ret buttons || return $ret

		if ((ret)); then
			if ! in_array $ret okcodes; then
				((ret == 130)) && cancel
				return $ret
			fi
		fi
	}

	if [[ -n $cb ]]; then
		$cb -v str $ret $str 'buttons' || return
	elif ((! $#str)); then
		if [[ ${(k)buttons[(r)$ret]} =~ '\[(.*)\]' ]]; then
			str=$match[1]
		else
			techo -c warn "Empty input string"
		fi
	fi

	#(($#str)) || return 10
	if ((gx && $#str)) && techo -r -c warn $str

	# output value entered
	if (($#_var)); then
		typeset -g "$_var=$str"
	else
		echo $str
	fi

	# output return code
	if (($+_opts[-I])); then
		typeset -gi "$_opts[-I]=$ret"
		dbgecho -c warn "Selected index: $ret"
	fi

	return 0
}

function clearBuffer()
{
	while read -t 0 -k -r a; do : ; done # clear buffer
}

function confirm()
{
	local ret a c
	if [[ "$1" != -c ]]; then
		c=(-c warn)
	fi

	techo -n $c "$@" "(y/N)? "
	readkey -C -q; ret=$?
	clearBuffer # consume any garbage
	if ((ret)); then
		techo 'n'
	else
		techo 'y'
	fi
	return $ret
}

function readkey()
{
	local _k1 _k2 _k3 _k4 _k5 _k6 _k7 # _k8 _k9

	function _cancel() { throw 130 }

	{
		KEY=''
		trap '_cancel' SIGINT

		if [[ $1 == '-C' ]]; then
			shift
			clearBuffer
		fi

		read -krs "$@" KEY || return $?
		read -krs -t 0.0001 _k1 && read -krs -t 0.0001 _k2 && read -krs -t 0.0001 _k3 &&
			read -krs -t 0.0001 _k4 && read -krs -t 0.0001 _k5 && read -krs -t 0.0001 _k6 &&
			read -krs -t 0.0001 _k7 # && read -krs -t 0.0001 _k2 && read -krs -t 0.0001 _k3 &&

		KEY+="$_k1$_k2$_k3$_k4$_k5$_k6$_k7"
		dbgecho -r - "${(q)KEY}"
		return 0
	} always {
		ret=$?
		if catch '*'; then
			((CAUGHT==130)) && { KEY="130"; return 0 }
			throw $CAUGHT
		fi
	}
	return $?
}

function chooser()
{
	local noSelect sep field bytes search current head foot section
	local _olist chosen selectors ofs
	local file _opt _opts selected selected_idx list_keys events items
	integer multi i j noAutoSelect max_check=2 _len

	selectors=(${${(@uM)@#-[bfsR]}#-}) # keep options order

	zparseopts -D -M -A _opts - n:=noSelect -section: S: \
		 I: -save-index:=I v: D:=current -ifs: -items: \
		 s:=sep f:=field R:=regex b:=bytes ofs:=ofs \
		 H:=head -head:=H -header:=H p:=H F:=foot -foot:=F -footer:=F -marks: \
		 -multi -use-keys -selected: E:=events -events:=E \
		 -file -files -dir -no-auto-select -strip-color

	typeset -g ACTION='' # empty for the default event (SELECT)
	typeset -a chosenList sectionList
	multi=$+_opts[--multi]

	if (($+_opts[--dir])); then
	elif (($+_opts[--files])); then
		multi=1
		_opts[--file]=1
	fi
	search=$_opts[-S]

	# if there are other events of just "select", the default action/event, forbit auto-select
	(($#events || $+_opts[--no-auto-select])) && noAutoSelect=1

	[[ -n $ofs ]] && ofs=$ofs[2]

	if (($#sep || $#field)); then
		(($#sep && $#field)) && unset 'selectors[(I)[sf]]'
		field=${field[2]:-1}
		if [[ $field == '*' ]]; then
			field=''
			ofs=${ofs:-;}
		fi
		sep=${sep[2]:- }
	fi

	typeset -A list_keys
	if (($+_opts[--file] || $+_opts[--dir])); then
		if ((use_ranger)); then
			local out="${TMPDIR:-${TMP:-/tmp}}/ranger.out" ropts=()
			if (($+_opts[--dir])); then
				ropts+=(--choosedir $out --show-only-dirs)
			elif ((multi)); then
				ropts+=(--choosefiles $out)
			else
				ropts+=(--choosefile $out)
			fi
			#--list-tagged-files=tag
			if (($+_opts[--selected])); then
				ropts+=(--selectfile "$=_opts[--selected]")
			elif (($#)); then
				ropts+=(--selectfile "$1")
			fi
			if ! type ranger >/dev/null; then
				chkCmd ranger --git 'ranger/ranger' || abort $?
			fi
			ranger "$ropts[@]" || return
			explode -v chosenList "$(<$out)" $'\n'
		else
			local _chTmp="$1"
			if (($+_opts[--file])); then
				while [[ ! -f $_chTmp ]]; do
					(($#_chTmp)) && techo -c lred "$_chTmp is not a file."
					input -v _chTmp -p "${head[2]:-Enter file}" || abort $?
				done
			elif (($+_opts[--dir])); then
				while [[ ! -d $_chTmp ]]; do
					(($#_chTmp)) && techo -c lred "$_chTmp is not a directory."
					input -v _chTmp -p "${head[2]:-Enter directory}" || abort $?
				done
			fi
			chosenList=($_chTmp)
		fi
	else
		if (($+_opts[--items])); then
			items=$_opts[--items]
			typeset -ga $items
			((${(P)#items})) || abort 10 'No items given'
		else
			(($#)) || abort 10 'No arguments given'
		fi
		if (($+_opts[--use-keys])); then # keyboard shortcuts
			if (($+_opts[--ifs])); then
				abort -v3 2 'Not implemented --use-keys option together with --ifs'
			fi

			_olist=()
			(($# % 2)) && abort -v3 1 "Odd number of options with --use-keys: ""$@"

			if (($#items)); then
				integer len=${(P)#items}
				for ((i=1; i<=len; )); do
					local glob= "${${(P)items}[i++]}"
					if [[ -n $glob ]]; then
						# keys are globs and value is element index
						list_keys+=("$glob" $((i/2)))
					fi
					# element values
					 _olist=("${${(P)items}[i++]}")
				done
			else
				#todo items=("${(z)@")
				for ((i=1; i<=$#; )); do
					local glob="$@[i++]"

					if [[ -n $glob ]]; then
						# keys are globs and value is element index
						list_keys+=("$glob" $((i/2)))
					fi
					# element values
					_olist+=("$@[i++]")
				done
			fi
		else
			if (($#items)); then
				if (($+_opts[--ifs])); then
					explode -v _olist "${${(P)items}[*]}" $_opts[--ifs]
				else
					_olist=("${${(P)items}[@]}")
					#_olist=("${(z)${(P)items}[@]}")
				fi
			elif (($+_opts[--ifs])); then
				explode -v _olist "$*" $_opts[--ifs]
			else
				_olist=("$@")
				#_olist=("${(z)@}")
			fi
		fi
	fi

	if (($+_opts[--file] || $+_opts[--dir])); then

	elif (($#_olist > 1 || noAutoSelect)); then
		chosenList=()
		{
			integer current_key=1
			selected=()
			if (($+_opts[--selected])); then
				selected_idx=("${(@z)${_opts[--selected]}}")

				for ((i=1; i<=$#selected_idx; i++)); do
					# make sure all index are integers
					if [[ $selected_idx[i] != <-> ]] ; then
						tmp=$_olist[(i)${selected_idx[i]}]
						if (($tmp <= $#_olist)); then
							selected_idx[i]=($tmp)
						else
							techo -c warn "$selected_idx[i] not an integer, and not an item in the list"
						fi
					fi
				done
			fi

			if [[ -n $current[2] ]]; then
				current=$current[2]
				if [[ $current != <-> ]]; then
					in_array -v current_key $current _olist
				elif (($+_olist[$current])); then
					current_key=$current
				fi
				if ((noSelect[(r)$current_key])); then
					current_key=
				fi
			fi


			local sel_box elem_show _msg last_search
			integer last_key next_key b loop=1
			integer opt_wid page_size max_lines found_idx=0
			integer num_elem first last begin_idx end_idx noSelectAlign

			max_lines=${PAGE_SIZE:-15}
			((page_size=LINES>max_lines?max_lines:LINES))

			typeset -A keys=(
				'UP' $'\e[A' 'PGUP' $'\e[5~' 'HOME' $'\e[1~'
				'DOWN' $'\e[B' 'PGDOWN' $'\e[6~' 'END' $'\e[4~'
				'DEL' $'\033[3~'
			)
			for i in $selected_idx; do
				#(($+selected[i])) && selected[i]=1
				selected[i]=1
				#((b=selected[$i]+1)); ((b>selected[i]=1
			done

			(($#_olist >= 10)) && include -qr conversion

			(($#noSelect)) && noSelect=($=noSelect[2])
			for ((i=j=1; i<=$#_olist; i++)); do
				tmp=$_olist[i]
				if [[ $tmp[1] == '¬' ]]; then
					_olist[i]=$tmp[2,-1]
					section+=($i)
				fi

				if [[ -z ${(k)list_keys[(r)$i]} && -z ${noSelect[(r)$i]} ]]; then
					if ((j <= 9)); then
						_opt=$j # number as key binding
					elif ((j < 36)); then
						_opt=$(inttochar $j + 55) # letter
					else
						#techo '@TODO - ran out of key shortcuts: j='$j
						continue
					fi
					list_keys+=($_opt $i)
					if (($#_opt>opt_wid)); then
						opt_wid=$#_opt
					fi
					((j++))
				fi
			done
			((DEBUG)) && array_dump noSelect
			((DEBUG)) && array_dump list_keys

			#typeset -R $opt_wid opt  # right justification, left padded value
			((noSelectAlign=opt_wid+1))
			if ((multi)); then
				list_keys+=(' ' 'CHECK')
				sel_box=" [${C[ok]} $C_]"
				((noSelectAlign+=4))
			fi

			if (($#events)); then
				events=(${(z)events[2]})
				((DEBUG)) && array_dump events
				list_keys+=(${(U)events})
			fi

			while ((loop)); do
				# # # # # # # # #
				# FIND ELEMENTS #
				# # # # # # # # #
				if [[ -z $search || $search != $last_search ]]; then
					elem_show=() # clear
					# elem_show has nothing to do with pagination. It indicates it's not filtered out.
					# begin_idx and end_idx are used for that.
					((num_elem=first=last=0))
					for ((i=1; i<=$#_olist; i++)); do
						if [[ $_olist[i] == (#i)*$search* ]]; then # case insensitive
							elem_show[i]=1
							#elem_show+=($i)
							((num_elem++))
							((first==0)) && first=$i
							last=$i
						fi
					done
					last_search=$search
					((elem_show[current_key])) || current_key=$first
				fi
				#	first=1
				#	last=$#_olist
				#	elem_show=() # clear
				#	for ((i=1; i<=$#_olist; i++)); do
				#		elem_show[i]=1
				#		#elem_show+=($i)
				#	done
				#	num_elem=$#_olist

				# TODO: find page where current_key belongs to
				# at the beginning we draw all pages until we find it
				#begin_idx=
				begin_idx=$first
				((end_idx=i-1))
					#techo "begin=$begin_idx, end=$end_idx, current=$current_key"

				# for page_size = 5: end = page_size - foot = 5 - 1 = 4
				# in case of hidden elements (search filter)
				# i j                     i j
				#   header                  header
				# 1 2  begin              5 2  begin
				# 2   <- hidden elem      6 3
				# 3 3                     7   <- hidden elem
				# 4 4  end  j<page_size   8 4  end  j<page_size
				#   footer                  footer
				(($#head)) && techo -c head "$head[2]"

				if ((next_key)); then
					last_key=current_key
					current_key=$next_key
					techo last=$last_key, current=$current_key
					if ((current_key > end_idx)); then
						found_idx=0
						((begin_idx=end_idx+1))
						techo "begin=$begin_idx, end=$end_idx"
						while ((! found_idx && begin_idx<=last)); do
							for ((i=begin_idx, j=2; i>=first && j<page_size; i++)); do
								((elem_show[$i])) && ((j++))
								if ((i==current_key)); then
									found_idx=$i
								fi
							done
							if ((! found_idx)); then
								begin_idx=$i
							fi
						done
						if ((i>last)); then
							((end_idx=last))
						else
							((end_idx=i-1))
						fi
					elif ((current_key < begin_idx)); then
						found_idx=0
						((end_idx=begin_idx-1))
						techo "begin=$begin_idx, end=$end_idx"
						while ((! found_idx && end_idx>=first)); do
							for ((i=end_idx, j=2; i>=first && j<page_size; i--)); do
								((elem_show[$i])) && ((j++))
								if ((i==current_key)); then
									found_idx=$i
								fi
							done
							if ((! found_idx)); then
								end_idx=$i
							fi
						done
						if ((i<first)); then
							begin_idx=$first
						else
							((begin_idx=i+1))
						fi
						techo "begin=$begin_idx, end=$end_idx"
					fi
				fi

				# # # # # # #
				# DRAW LIST #
				# # # # # # #
				if ((num_elem)); then
					for ((i=begin_idx, j=2; j<page_size && i<=last; i++)); do
						((elem_show[$i])) || continue
						if [[ -n ${noSelect[(r)$i]} ]]; then
							# left padding: (l:expr::string1::string2:)
							techo "  ${(l:noSelectAlign:)} $_olist[i]"
							continue
						fi

						if [[ -n ${section[(r)$i]} ]]; then
							techo -c head $tmp[2,-1]
							continue
						fi

						_opt=${(k)list_keys[(r)$i]}
						if [[ -z $_opt ]]; then
							_opt=' '
						fi

						if ((multi)); then
							if ((selected[$i])); then
								# 5,6 -> 2 digit color number
								# 8,9 -> unicode symbol
								# @TODO: cycle through multiple selection types
								#selection_types=(' ')
								sel_box[8]=$'\u2714' # '✔'
							else
								sel_box[8]=' '
							fi
						fi

						if ((i==current_key)); then
							found_idx=$i
							techo "⮕ $C[ok]${(ml:opt_wid:)_opt}$C_)$sel_box $_olist[i]"
						else
							techo "  $C[ok]${(ml:opt_wid:)_opt}$C_)$sel_box $_olist[i]"
						fi

						((j++))
					done
					_msg="Showing $((j - 2)) matches of total $num_elem"
				else
					_msg='No matches found'
				fi
				#((end_idx=$i-1))
				#techo "begin=$begin_idx, end=$end_idx, current=$current_key"
				(($#foot)) && techo -c head "$foot[2]"

				# # # # # # # # # #
				# INPUT  HANDLING #
				# # # # # # # # # #
				while readkey; do
					case $KEY in
						$'\n')
							if ((multi)); then
								# Accept and finish
								loop=0
								break
							elif ((current_key)); then
								# Select and finish
								selected_idx=($current_key)
								loop=0
								break
							fi
						;;
						$keys[HOME])
							if ((current_key!=first)); then
								next_key=$first
								break
							fi
						;;
						$keys[PGUP])
							i=$current_key
							j=2
							while ((i>=first && j++<page_size)); do
								# find previous shown element
								while (((elem_show[--i]!=1 || noSelect[(r)$i]) && i>=first)); do ; done
							done
							if ((i<first)); then
								i=$last
							fi
						;;
						$keys[UP])
							((DEBUG)) && array_dump elem_show
							((DEBUG)) && array_dump noSelect
							i=$current_key
							techo i=$i
							set -x
							for ((--i; (elem_show[i]!=1 || noSelect[(r)$i]) && i>=first; --i)) :
							if ((i<first)); then
								i=$last
							fi
							set +x
							techo i=$i
							# if ((i>first)); then
							# 	while ((elem_show[--i]!=1 && i>1)) :
							# else
							# 	i=$last
							# fi
							if ((i!=current_key)); then
								next_key=$i
								break
							fi
						;;
						$keys[END])
							if ((current_key!=last)); then
								next_key=$last
								break
							fi
						;;
						$keys[PGDOWN])
							i=$current_key
							j=1
							while ((i<=last && j++<page_size)); do
								# find next shown element
								while (((elem_show[++i]!=1 || noSelect[(r)$i]) && i<=last)); do; done
							done
							if ((i>last)); then
								i=$last
							fi
						;;
						$keys[DOWN])
							i=$current_key
							# find next shown element
							while (((elem_show[++i]!=1 || noSelect[(r)$i]) && i<=$last)); do; done
							if ((i>last)); then
								i=$first
							fi
							#if ((i<last)); then
								# while ((elem_show[++i]!=1 && i<$#list)) :
							#else
							#	i=$first
							#fi
							if ((i!=current_key)); then
								next_key=$i
								break
							fi
						;;
						$keys[LEFT])
						;;
						$keys[RIGHT])
						;;
						'/')
							input -r -p "Search" -v search
						;;
						$'\e')
							return 130
						;;
						*)
							# Verify whether KEY matches one of options
							event=$list_keys[(k)${(U)KEY}]
							[[ -n $event ]] || continue
							if [[ $event == <-> ]]; then
								# Select corresponding element by KEY shortcut
								i=$event
							elif ((multi)); then
								i=0
								if [[ $event == 'CHECK' ]]; then
									if ((current_key)); then
										i=$current_key
									fi
								else
									loop=0
									break
								fi
							else
								# Action by KEY event
								selected_idx=($current_key)
								loop=0
								ACTION=$event
								break
							fi

							if ((i)); then
								if ((multi)); then
									# Toggle selection
									# @TODO: cycle through multiple selection types
									((b=1-selected[$i]))
									#((b=selected[i]+1))
									#((b>max_check)) && b=0
									selected[i]=$b
									next_key=$i
								else
									# Select and finish
									# TODO finish only if the event say so
									selected_idx=($i)
									loop=0
								fi
								break
							fi
						;;
					esac
				done
				#[[ $KEY == 130 ]] && confirm Cancel && cancel
				[[ $KEY == 130 ]] && throw 130
			done

			if ((multi)); then
				# check selection
				for ((i=1; i<=$#selected; i++)); do
					if ((selected[i])); then
						chosenList+=($_olist[i])
						(($+_opts[-I])) && selected_idx+=($i)
					fi
				done
			else
				chosenList+=($_olist[$selected_idx])
			fi
		} always {
			if catch '*'; then return $CAUGHT; fi
		}
	else
		# Only one element - autoselect
		chosenList=($_olist)
		selected_idx=1
	fi

	#(($#chosenList)) || return 10

	typeset -a _olist=()
	# Filter output
	typeset +R _opt
	for chosen in $chosenList; do
		if (($+_opts[--strip-color])); then
			chosen="$(stripcolors $chosen)"
		fi

		for _opt in $selectors; do
			case $_opt in
			R)
				if [[ $chosen =~ $regex[2] ]]; then
					chosen=$match
				else
					continue
				fi
			;;
			b)
				chosen=$(echo - $chosen | cut $bytes)
				#typeset -l "chosen=${chosen:bytes[1,]}"
			;;
			s|f)
				explode -v chosen $chosen $sep $field
			;;
			esac
		done

		if [[ -n $ofs && $#_olist -gt 0 ]]; then
			#@UNTESTED, maybe output a string
			_olist+=($ofs $chosen)
		else
			_olist+=($chosen)
		fi
	done

	# Save selection
	if (($+_opts[-v])); then
		typeset -ga "$_opts[-v]"
		set -A "$_opts[-v]" $_olist
		((DEBUG)) && array_dump _olist
	else
		print -r -- $_olist
		dbgecho "chosen: $_olist"
	fi

	# Save index
	if (($+_opts[-I])); then
		if ((multi)); then
			typeset -ga
			set -A $_opts[-I] $selected_idx
		else
			typeset -gi "$_opts[-I]=$selected_idx"
		fi
		dbgecho "idx: $selected_idx"
	fi
	#[[ ! -t 1 || -z $var ]] && print -r $_olist
	(($#chosenList)) || return 10
	return 0
}

#@TODO merge with inst() from zsh_main
function chkCmd()
{
	local _opts cmd tmp verbose list pkgs pkg packager
	zparseopts -D -M -A _opts - v=verbose l=list -list=l -pkg:=pkgs p:=pkg \
		-git: g:=git b: -branch=b

	(($#1)) || abort -v 1 "$0: empty command"
	cmd=$1
	if command -v $cmd >/dev/null; then
		[[ -n $verbose ]] && techo -c head "$cmd$C_ already installed."
		[[ -z $list ]] && return 0
	else
		techo -c lred "Command not found: ${C[head]}\"$cmd\"$C_. ${C[warn]}Searching for package to install."
	fi
	integer i n
	typeset -a similar lines pkgList
	#@TODO make unique list of potential packages
	if (($#pkgs)); then
		for pkg in ${(z)pkgs[2]}; do
			# check package exists
			pkgList+=($pkg - apt -)
		done
	fi

	if (($+_opts[--git])); then
		include -q git
		pkgList+=($_opts[--git] ${_opts[-b]:-'-'} git $cmd)
		# i:pkg   |   i+1:version   |   i+2:packager   |   i+3:cmd
	fi

	if [[ -z $pkgList && -x /usr/lib/command-not-found ]] ; then
		pkgList=(
			${(z)$(
				/usr/lib/command-not-found --no-failure-msg ${list:+--ignore-installed} $cmd |& awk $'
				match($0, /^sudo (apt|snap) +install (\\S+)(\\s*#\\s*version ([^ ,]+))?/, a) {
					print a[2]" "(a[4]==""?"-":a[4])" "a[1]" -"
				}
				# similar commands found
				match($0, /^ *command \'(\\S+)\' from (deb|snap) (\\S+) ?(\(([^)]+)\))?$/, b) {
					print b[3]" "(b[5]==""?"-":b[5])" "(b[2]!="deb"?b[2]:"apt")" "b[1]
				}'
			)}
		)
	fi

	if ((! $#pkgList)); then
		# order: 1º (pkg == cmd) 2º cmdpath in $path 3º cmdpath ~ bin
		# pkg cmdpath
		pkgList=($(apt-file find "/$cmd$" |\
			awk 'match($0, /([^:]+): (\/.*\/'$cmd')$/, a) {print a[1]" - apt "a[2]}'
		))
	fi

	if ((! $#pkgList)); then
		techo -c warn "No packages found to install command $cmd"
		return 10
	fi

	# pkg version packager cmd
	for ((i=1; i<=$#pkgList; i+=4)); do
		local expr
		# get package version and description
		case $pkgList[i+2] in
		apt)
			expr=(
				1 '/^\S/' -
					'exit'
				- '/^Version/' -
					'print $2"\n;"; next'
				- '/^Description(-[a-z]{2}(_[A-Z]{2})?)?:\s*(.*)/' m
					'x=1; print m[3]; next'
				1 '/^\s/' -
					'print substr($0, 2)'
			)
			apt-cache --no-all-versions show $pkgList[i] | awkWrapper -e expr -o tmp
			;;
		snap)
			expr=(
				function - -
				'join(array, sep, start, end,   result, n) {
					if (start == "") start=0
					if (end == "") end=length(array)
					for (n in array) {
						n=int(n)
						if (n > end) break
						else if (n == start) result=array[n]
						else if (n > start) result=result sep array[n]
					}
					return result
				}'
				'x' '/^\S/' -
					'x=0; if (d) d=0; else if (c) exit'
				- '/^summary:\s*(.*)/' m
					'desc[0]=m[1]; next'
				- '/^description: (.*)/' m
					'x=1; d=1; next'
				- '/^channels:/' -
					'x=1; c=1; next'
				'x && d' '/^\s+(.*)/' m
					'desc[d++]=m[1]; next'
				'x && c' '/^\s+([^:]+):\s+(.*)/' m
					'ver[c++]=m[1]" "m[2]; next'
				END - -
					'print join(ver,"\n",1)"\n;\n"join(desc,"\n")'
			)
			snap info $pkgList[i] | awkWrapper -e expr -o tmp
			;;
		git)
			if [[ $pkgList[i+1] == '-' ]]; then
				#github -e --info -o tmp -r $_opts[--git] || abort $? ""
			fi
			tmp=('-' 'bla bla')
			;;
		*)
			techo -c lred "Unsupported packager: $C[warn]$pkgList[i+2]"
			continue
			;;
		esac

		pkgList[i+1]=$tmp[1] # version
		in_array -v n ';' tmp || n=2
		desc=("${(@fqq)tmp[n+1,-1]}") # description

		# i:pkg   |   i+1:version   |   i+2:packager   |   i+3:cmd
		case $pkgList[i+3] in
			$cmd|'-')
				lines+=($pkgList[i] "(version: ${(qq)pkgList[i+1]})" $pkgList[i+2] $cmd $desc[1] $'\n')
				;;
			*)
				similar+=("Similar command:" $pkgList[i+3] '(' $pkgList[i+2] 'package:' $pkgList[i] 'version:' $pkgList[i+1] ')' $cmd $desc[1] $'\n')
				;;
		esac
	done

	tmp=()
	chooser -R'^(.*) \(version: '\''(.*)'\''\) ([^ ]*) ([^ ]*)|Similar command: (.*) \((.*) (.*) version: (.*)\) ([^ ]*) ([^ ])' \
		-v tmp --ifs $'\n' $lines $similar || return
	#chooser -f'*' -v tmp --ifs $'\n' $lines $similar || return

	if [[ $tmp[1] =~ '^Similar' ]]; then
		pkg=$tmp[7]; cmd=$tmp[3]; packager=$tmp[5]
	else
		pkg=$tmp[1]; cmd=$tmp[6]; packager=$tmp[9]
	fi

	run -s -p "Installing $pkg (command: $C[lcyan]$cmd$C_)" $packager install $pkg
}

function alert()
{
	local icon title body
	if [ "$1" = "-e" ]; then
		icon="error"
		title="Error"
		shift
		((! NOSND)) && sndplay error
	else
		icon="trophy-gold"
		title="Success"
		((! NOSND)) && sndplay success
	fi
	vflash
	notify-send --icon=$icon "$title" "$*"
}

function vflash()
{
	techo "\x1b[?5h" ; sleep .2 ; techo "\x1b[?5l"
}
function sndplay()
{
	local dir
	dir=$SOUNDS/$1
	[ -d "$dir" ] || { techo -c err "$dir doesn't exist" ; return }
	run -I libsox-fmt-mp3 - shuf -ezn 1 $dir/* | xargs -0 -n1 play
}

[ -z "$BASH" ] || return
function _push()
{
	local data l=${#stack[@]}
	typeset -A data
	data[name]=$1 ; data[verbose]=$2 # ; data[opts]=$3
	stack[$l]=$data
}
function _pop()
{
	local l=$(( ${#stack[@]} - 1 ))
	[ ${+stack[$l]} -eq 1 ] || { echo pop without push ; return 1 }
	data=$stack[$l]
	unset "stack[$l]"
}
function run_begin()
{
	local ret=$? verbose run
	zparseopts -M -D -A arr - v -verbose=v r: -run:=r
	for key in ${(k)arr}; do
		val=${arr[$key]}
		case $key in
			-v) verbose=1 ;;
			-r) runargs=$val ;;
		esac
	done
	name=$1
	_push $name $verbose
	if [ "$verbose" -eq 1 ]; then
		banner Starting: $name
	fi
}
function run_end()
{
	_pop
	if [ "${data[verbose]}" -eq 1 ]; then
		banner Finished: $data[name]
	fi
}

# Verbose levels
# 0: Quiet
# 1: Only errors
# 2: Show errors. Show header if given a string (-p something)
# 3: Errors and header
# 4: Above, plus finishing message
# 5: Above, plus associated command
# 6: Above, plus full command with arguments
comp+=('run=which')
function run()
{
	local ret cmd fullcmd logfile watch cmdPrefix
	local sudo trysudo dryrun color alert print
	local cmdinst workdir okcodes debug noEx
	integer verbose
	typeset -A _opts

	if [[ ${1:0:1} == - ]]; then
		zparseopts -M -D -A _opts - v: c:=color a=alert p: e=noEx A=noAbort \
			s=sudo S=trysudo n=dryrun I:=cmdinst -cd:=workdir \
			l:=logfile w:=watch N:=okcodes -ok-exit-codes:=N D:=debug
		OPT_CHK noAbort -A

		[[ $1 == - ]] && shift
		[[ ${1:0:1} == - ]] && { abort 2 "Invalid command: $1"; return }
	fi
	verbose=${_opts[-v]:-6}

	cmd=$1
	if [[ -n $sudo ]]; then
		fullcmd=(sudo "$@")
		trysudo=
	else
		fullcmd=("$@")
	fi

	if [[ -z $color ]]; then
		color=(-c head)
	elif [[ $color[2] == (0|) ]] || ; then
		color=''
	fi

	if (($+_opts[-p])); then
		print=$_opts[-p]
	else
		unset print
	fi
	if ((verbose>=3-$+print)); then
		if ((verbose>=6)); then
			if (($+print)) && [[ $print != $fullcmd ]]; then
				techo -r $color $print
			fi
			techo -r $color "${(q@)fullcmd}"
		elif (($+print)); then
			((verbose>=5)) && techo -r $color "$print ($cmd)" || techo -r $color $print
		else
			techo -r $color $cmd
		fi
	fi

	#@TODO: log $fullcmd (-l)
	(($+print)) && print="$print : $cmd" || print=$cmd

	{
		[[ -n $dryrun ]] && return 0

		if [[ -n $workdir ]]; then
			workdir=$workdir[2]
			if [[ ! -d $workdir ]]; then
				confirm "$workdir does not exist. Create" && mkdir $workdir || throw $?
			fi
			cd $workdir || throw $?
		fi

		if [[ -z $okcodes ]]; then
			okcodes=(0)
		else
			explode -v okcodes $okcodes[2] ','
			in_array 0 okcodes || okcodes+=(0)  # add 0 to successful exit codes
		fi

		(($#debug)) && DEBUG=$debug[2]
		if ((DEBUG)); then
			(($#watch)) && _dbg_funcOnOff $watch[2]

			cmdPrefix='debug'
		elif (($#color)); then
			cmdPrefix='color'
		fi
		# # # # # # # # # #
		# Execute command #
		# # # # # # # # # #
		#waitPid -c "dirtyMem -P" color $fullcmd
		while ((1)); do
			if [[ -n $watch ]]; then
				$cmdPrefix $fullcmd & waitPid -c $watch[2] $!
			else
				$cmdPrefix $fullcmd
			fi
			ret=$?

			((ret==130)) && throw $ret
			if ((ret==127)); then
				chkCmd ${cmdinst[2]:+-p$cmdinst[2]} $cmd && continue || throw 127
			fi

			break
		done

		if ! in_array $ret okcodes; then
			if [[ -n $trysudo ]]; then
				techo "Trying with sudo"
				sudo $fullcmd
				ret=$?
			fi
			in_array $ret okcodes || throw $ret
		fi
	} always {
		if ((DEBUG)); then
			(($#watch)) && _dbg_funcOnOff $watch[2] 0
			#{ typeset +Ttf $cmd || set +x }
		fi
		if catch '*'; then
			local data=(${=CAUGHT})
			ret=$data[1]
			if ((ret==130)); then
				cancel $noEx $verbose "$print $CANCEL"
				return $ret
			fi
			((verbose)) && techo "$print $FAIL ($data)"
			[[ -n $alert ]] && error "$print error: $data"
			abort $noEx $ret
			echo "ret=$ret,?=$?"
			return $ret
		fi
	}

	if in_array $ret okcodes; then
		((verbose>=4)) && techo "$cmd $OK"
		[[ -n $alert ]] && success "$cmd finished successfully."
	else
		((verbose)) && techo "$print $FAIL"
		[[ -n $alert ]] && error "$print error: ret=$ret"
		abort $noEx $ret
	fi
	return $ret
}

# nice fonts:
# smaller: pagga, future
# medium: smblock
function banner()
{
	local cmd c='warn'
	if type figlet >/dev/null; then
		cmd='figlet'
	elif type toilet>/dev/null; then
		cmd='toilet'
	else
		if type apt-get 2>&1 >/dev/null; then
			aptinst figlet && cmd='figlet'
			aptinst toilet && [[ -z $cmd ]] && cmd='toilet'
		elif type yum >&/dev/null; then
			sudo yum install figlet && cmd='figlet'
			sudo yum install toilet && [[ -z $cmd ]] && cmd='toilet'
		fi
	fi
	[[ "$1" == '-c' ]] && { c=$2; shift 2 }

	if [[ -z "$cmd" ]]; then
		techo -c $c "$@"
		return
	fi

	$cmd "$@" | colorify -c $c >$TTY
}
function group()
{
	local line opt
	local integer i=0 num=${1:-1}
	zparseopts -D -M - g:=opt

	[[ -n $opt ]] && num=$opt[2]
	while read -r line; do
		echo $line
		((++i % num == 0)) && echo ――――――――――――――――――――――――
	done
}
function color()
{
	{ "$@" 2>&1 1>&3 | sed $'s,.*,[91m&[0m,' 1>&2 } 3>&1
	return $pipestatus[1]
}

function colorify()
{
	local line data debug isPipe=0 highlight hcolor hl2 C1 Ch c
	zparseopts -D -M - D:=debug h:=highlight -hc:=hcolor c:=c
	#@broken: [ ! -p /dev/stdin ] && exit 0
	[ -t 0 ] || isPipe=1
	if [[ -n $highlight ]]; then
		highlight=$highlight[2]
		hcolor=${hcolor[2]:-head}
	fi
	if [[ -n $c ]]; then
		c=$c[2]
		if (($+C[$c])); then
			C1=$C[$c]
		else
			colorSet $c && C1=$C[$c] || C1=$C[lred]
		fi
		if (($+C[$hcolor])); then
			Ch=$C[$hcolor]
		else
			colorSet $hcolor && Ch=$C[$hcolor] || Ch=$C[head]
		fi
		[[ $C1 == $Ch ]] && Ch=$C[lred]
		hl2=$Ch$highlight$C1
		if ((isPipe)); then
			while read -r line; do
				if [[ -n $highlight ]]; then
					echo "$C1${line//$highlight/$hl2}$C_"
				else
					echo "$C1$line$C_"
				fi
			done
		elif [[ -n $1 ]]; then
			data=("${(@f)@}")
			for line in $data; do
				if [[ -n $highlight ]]; then
					echo "$C1${line//$highlight/$hl2}$C_"
				else
					echo "$C1$line$C_"
				fi
			done
		fi
	else
		local a cmd
		if [[ -n $debug ]]; then
			cmd=$debug[2]
			# @TODO IFS='' ??
			# while IFS='' read line; do
			while read line; do
				if [[ $line =~ ^\\+([0-9]?)\<?$cmd:([0-9]+)\>\ (.*) ]]; then
					techo -c lcyan $cmd:$match[2] $C_$match[3]
				elif [[ $line =~ ^\\+([0-9]?)\<?([[:alnum:]]+):([0-9]+)\>\ (.*) ]]; then
					dbgecho -c blue $match[1]:$match[2] $C_$match[3]
				else
					techo -c lred $line
				fi
			done
		else
			if [[ -n $highlight ]]; then
				if ((isPipe)); then
					grep --color $highlight'\|$'
				else
					grep --color $highlight'\|$' "$@"
				fi
			fi
		fi
#			debug=$(cat)<<-END
#				function dbg(c,name,line,str) {
#					printf("\033[%dm%s\033[1m%s\033[0m> %s\n",90+c,name,line,str)
#				}
#				/^\+${debug[2]}:([0-9]+)> (.*)/ {dbg(5,"${debug[2]}",\$1,\$2);next}
#				/^\+([[:alnum:]]+):([0-9]+)> (.*)\\n/ {dbg(6,\$1,\$2,\$3);next}
#			END
#		fi
#		a=$(cat)<<-END
#		BEGIN{IGNORECASE=1}
#		function color(c,s) {
#			printf("\033[%dm%s\033[0m\\n",90+c,s)
#		}
#		$debug
#		/\.php/ {color(2,\$0);next}
#		/error/ {color(1,\$0);next}
#		/success/ {color(2,\$0);next}
#		/warning/ {color(3,\$0);next}
#		/INFO/ {color(4,\$0);next}
#		/DBG/ {color(5,\$0);next}
#		{print}
#		END
#		echo "a=${(qqq)a}"
#		awk -D -f <(<<< ${(q)a}) </dev/stdin
	fi
}

# Added 2019-05-08 23:55
function refactor()
{
	local dir=${1:-.}
	#run -S find . -type f -name '*.php' -exec perl -pi -e "s/$search/$replace/g" {} +
	run -S grep < <(
		find $dir -type f -name '*.php' -print0 | xargs -0 sed "s/$search/${C[cyan]}${replace}$C_/g"
	)
	confirm Replace || abort
	find $dir -type f -name '*.php' -print0 | xargs -0 sed -ised "s/$search/$replace/g"
}

alias q=todo
# Added 2019-06-04 17:47
function todo()
{
	local id search cmd todo todos
	local box dir glob data baseDir=$CFG e='todo'
	zparseopts -D -M - d:=dir -dir:=d S:=search
	if (( ! $# )); then
		cmd='show'
	else
		cmd=$1; shift
		data=$*
	fi
	if [[ $#dir[2] -ne 0 ]]; then
		dir=$dir[2]
	else
		dir=$baseDir
	fi
	[[ -d $dir ]] || abort 127 "\"$dir\": directory not found"

	include file
	glob="$dir/*.$e"
	todos=($~glob(-N))
	case $cmd in
	add)
		chooser -v todo $search -f1 $todos:t "New todo" "Browse full path" || cancel
		if [[ $todo == 'New' ]]; then
			input -v todo -p 'Enter todo id' || cancel
			[[ ${todo:0:1} != / ]] && todo=$dir/$todo
			[[ $(getext $todo) == $e ]] || todo=$todo.$e
		elif [[ "$todo" == "Browse full path" ]]; then
			chooser -v todo --file -p "Choose path of todo" || cancel
			[[ ${todo:0:1} != / ]] && todo=$dir/$todo
			# @todo
			#dir=$(getfilename $todo)
		fi
		id=$(noext $(getfilename $todo) $e)
		input -p "Adding to todo $id" "$data" || cancel
		;;
	show)
		(($#todos)) || return 10
		chooser -v todo $search $todos:t || cancel
		id=$(noext $(getfilename $todo) $e)
		run -p "Todo: $id" show $todo
		#for todo in $~glob(-N); do
		#	id=$(noext $(getfilename $todo) $e)
		#	run -p "Todo: $id" show $todo
		#done
		#sqlite3 -batch test.db
		;;
	*)
		techo -c err "Invalid command: $cmd"
		usage
	esac

	function usage() {
		local opts=(
			dir	 d "path(default: $baseDir)" 'base directory'
			help h ''						 'help'
		)
		techo "$0 [options] [add|show] [search]"
		opts $opts
	}
}

function opts()
{
	local long opt desc arg
	for long opt arg desc; do
		print -ca -C 4 -- --$long -$opt $arg $desc
	done
}

# Added 2019-09-20 15:55
function alarm()
{
	local integer mins=13
	local msg
	[[ $1 == <-> ]] && { mins=$1; shift }
	[[ $1 == 'off' ]] && { k play; return }

	msg=${*:-alarm}
	{ while (( mins )); do
		techo -c warn "$mins minutes left to $msg"
		sleep 60
		((mins--))
	done ; alert $msg } &
}

# Added 2019-10-23 21:53
function kcmd()
{
	qdbus $KONSOLE_DBUS_SERVICE $KONSOLE_DBUS_SESSION "$@"
}

# Added 2020-03-06 13:18
function in()
{
	( cd "$1" && shift && "$@" )
}
