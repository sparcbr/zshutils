VERSION=1.0.8
[[ -v comp ]] || typeset -g -a comp

#alias _dbg_trap='[[ -o xtrace ]] && { unalias _dbg_trap; include debug && _dbg_trap $0 }'
function _dbg_trap() { set +x }

function techo()
{
	local c _O _topts nonl print noesc ts msg
	_dbg_trap $0
	zparseopts -M -D - c:=c n=nonl P=print r=noesc -O:=_O T=ts
	_topts=($=_O[2])
	[[ -n $nonl ]] && _topts+=('-n')
	[[ -z $TTY || ! -c $TTY ]] && TTY=/dev/null # stdout
#	while [[ ${1[1]} == '-' ]]; do
#		if [[ $1 == '-' || $1 == '--' ]]; then
#			shift
#			break
#		fi
#		_topts+=("$1")
#		shift
#	done
	if [[ -n $c ]]; then
		c=$c[2]
		if [[ $c == <1-> ]]; then
			msg="[38;5;${c}m$@$C_"
		else
			if [[ -v C[$c] ]] || { type colorSet >/dev/null && colorSet $c }; then
				msg="${C[$c]}${@}$C_"
			else
				msg="$@"
			fi
		fi
	else
		msg="$@"
	fi
	
	[[ -n $ts ]] && { print=1; ts='%D{%s.%.}>' }

	if [[ -n $print ]]; then
		print -P $noesc $_topts - $ts$msg >$TTY
	else
		echo ${noesc:+-E} $_topts - $ts$msg >$TTY
	fi
}

function cancel() {
	local _ret=$?
	_dbg_trap $0
	abort 130 "$C[warn]Cancelled $@"
	# $((ret != 130)) && throw $ret
	#abort 130 "$C[warn]Cancelled (ret=$_ret) $@"
}

() {
	typeset -gA ExTree # Ex
	ExTree=(Ex -
	  IoEx Ex
		FileIoEx IoEx
	  SqlEx Ex
		  ConstraintSqlEx SqlEx
	)
	local e #p
	for e in ${(k)ExTree}; do
		#Ex[$e]="(#m)*$e(_(#b)(*))#"
		typeset -g "$e=(#m)*$e(_(#b)(*))#"
	done
	# integer i len
	# for e p in ${(kv)spec}; do
	#  	if [[ $p != '-' ]]; then
	# 		exMask[$e]=$e$exMask[$p]  [IoEx]=IoEx
	#  	else
	# 		exMask[$e]=$e'(_[A-Z]##)#'
	#  	fi
	# done
	# for e in ${(k)spec}; do exMask[$e]='(#m)'$exMask[$e]; done
}

function throw()
{
	typeset -g EXCEPTION=$1
	typeset -ga ExArgs=("$@[2,-1]")
	readonly THROW
	if (( TRY_BLOCK_ERROR == 0 )); then
	  # We are throwing an exception from the middle of an always-block.
	  # We can do this by restoring the error status from the try-block.
	  (( TRY_BLOCK_ERROR = 1 ))
	fi

	# Raise an error, but don't show an error message.
	THROW= 2>/dev/null
}

function abort()
{
	integer last=$?
	local noexception verbose _EX_TYPE _EX dbglvl
	integer cod
	zparseopts -D - -ex:=_EX_TYPE e=noexception v:=verbose D:=dbglvl

	if (($#_EX_TYPE)); then
		_EX=$_EX_TYPE[2]
		if ((!$+ExTree[${_EX%%_*}])); then
			techo -c lred "Invalid Exception: ${_EX%%_*}"
			fstack 1
			throw $_EX $cod "$@"
		fi
	fi
	verbose=${verbose[2]:-2}
	if (($#)); then
		cod=$1; shift
		((DEBUG>=DBG_LVL+dbglvl[2]+1)) && fstack 1
	else
		cod=$last
		fstack 1
	fi
	[[ -n $ABORT ]] && $ABORT $_EX_TYPE $cod "$@"
	((verbose+cod>=4)) && techo -c lred -r ${_EX:-ERROR} $cod: "${@}"

	#@TODO $ZSH_EVAL_CONTEXT =~ toplevel* , does not seem to work
	((EXIT)) && [[ ! -o interactive ]] && exit $cod

	if (($#_EX)); then
		throw $_EX $cod "$@"
	elif [[ -z $noexception ]]; then
		throw $cod "$@"
	fi
	return $cod
}

function implode()
{
	_dbg_trap $0
	local _var _str _sep uniq _list ifs _Asep out
	zparseopts -D -M - v:=_var u=uniq -ifs:=ifs A:=_Asep

	[[ -n $2 ]] && _sep=$2 || _sep=' '
	if [[ -n $_Asep ]]; then
		[[ $(vartype $1) != association* ]] && { techo -c err "$1 is not an association"; return 1 }
		_Asep=$_Asep[2]
		_list=()
		for key in ${(Pk)1}; do
			_list+=($key$_Asep${${(P)1}[$key]})
		done
		out=${(@pj/$_sep/)_list}
	else
		out=${(@Ppj/$_sep/)1}
	fi

	if [[ -v $_var[2] ]]; then
		typeset -g "$_var[2]=$out"
	else
		echo -En $out
	fi
}

function explode()
{
	_dbg_trap $0
	local _var _str _sep uniq _list ifs _Asep stdin _tmp awk #@TODO awkWrapper...
	zparseopts -D -M - v:=_var u=uniq A:=_Asep -stdin=stdin -awk:=awk

	[[ -n $_var[2] ]] && _var=$_var[2]

	if [[ -n $stdin ]]; then
		_sep=${1:- }
		#_str=()
		while read -r _tmp; do
			#_str+=($_tmp)
			explode $_tmp $_sep $2
		done
		return
	else
		_str=$1
		_sep=${2:- }
		[[ -n $3 && $3 != <1-> ]] && abort 1 "field specifier is not a number: \$3=$3"
	fi

	_list=(${(@ps/$_sep/)_str})

	[[ -n $uniq ]] && _list=(${(@u)_list})

	if [[ -n $_var ]]; then
		if [[ -n $3 ]]; then
			typeset -g $_var
			eval $_var="'${_list[$3]}'"
		else
			if [[ -n $_Asep ]]; then
				[[ -v $_var ]] || typeset -gA $_var
				_Asep=$_Asep[2]
				set -A $_var ${(@ps/$_Asep/)_list}
			else 
				[[ -v $_var ]] || typeset -ga $_var
				set -A $_var $_list
			fi
		fi
	else
		if [[ -n $3 ]]; then
			print -r $_list[$3]
		else
			print -r $_list
		fi
	fi
}

function vartype() {
	print -rl -- ${(tP)1}
}

# Set info for a lib
function lib_set_info()
{
	local name info ll err
	zparseopts -D - E=err l=ll
	err=$#err; ll=$#ll; name=${(U)1}
	typeset -Ag "ZSH_${name}_INFO"
	set -A "ZSH_${name}_INFO" ver $2 path "$3" required $4 mtime "$5" lazyload $ll err $err
}

function getmime()
{
	explode "$(file -bi $(realpath "$@"))" ';' 1
	((pipestatus[1])) && fstack
}

function zshLibReadHeader()
{
	local mime version header tmp ll
	[[ $1 == '-l' ]] && { ll=1; shift }
	mime=$(getmime $1)
	typeset -gA HEADER=()
	{
		read version
		read header
		if ((ll)); then
			while read -r tmp; do
				[[ -z $tmp || $tmp == '#/head' ]] && break
				if [[ $tmp =~ '^alias (.*)=(.*)' ]]; then
					eval "alias $match[1]=$match[2]"
				elif [[ $tmp[1] != '#' ]]; then
					break
				fi
			done
		fi
	} < $1 || return
	if [[ $mime == 'text/plain' && $version =~ VERSION=([0-9]+(\.[0-9]+)*) ]]; then
		VERSION=$match[1]
		# headername=opt[=val]
		if [[ $header =~ ^\#(([[:alnum:]]+)([=:]([^[:blank:]]+))?)([[:blank:]]+([[:alnum:]]+)(=([^[:blank:]]+))?)*$ ]]
		then
			local opt val nop
			for nop opt nop val in $match; do
				case $opt in
					lazyload)
						;;
					*) techo -r opt $opt=$val; continue
						;;
				esac
				HEADER[$opt]=$val 
			done
		fi
	fi
}

function isZshLib()
{
	local mime=$(getmime "$*")
	[[ $mime == 'text/plain' && $(read -e <"$*") =~ VERSION=[0-9]+(\.[0-9]+)* ]]
}

function isScript()
{
	local mime=$(getmime "$*")
	[[ $mime = 'text/x-shellscript' || $mime == 'text/plain' && $(read -e <"$*") =~ VERSION=[0-9]+(\.[0-9]+)* ]]
}

function typeOf()
{
	#[[ -o xtrace ]] && _dbg_fcfg $0
	local name ret tpath all result _path
	local integer i=2
	zparseopts -D -M - a=all p=_path

	name=$1

	if [[ $(getpath $name) != '.' || $name == ./* ]]; then # full path given
		tpath=$(getfullpath $name)
		if isScript $tpath; then
			type='script'
		elif [[ -x $tpath ]]; then
			type='command'
		else
			echo 'none'
			return 1
		fi
		
		echo $type $tpath
		return 0
	fi

	ret=($(which -w $all $_path $name))

	for ((i=2 ; $+ret[i] ; i+=2)); do
		type=$ret[i]

		if [[ $type == 'none' ]]; then
			echo 'none'
			return 1
		fi

		if [[ $type == 'command' ]]; then
			tpath=$(which -p $name)
			isScript $tpath && type='script'
		fi

		result+=($type:$tpath)
	done
	echo ${(z)${(@u)result//:/ }}
}

function parseErrors()
{
	local line
	while read line; do
		[[ $line == 'EOF' ]] && return
		techo line=${(q)line}
		if [[ $line =~ $'^(.+):([0-9]+): (parse error near) `(.*)\'' ]]; then
		elif [[ $line =~ $'^(.+):([0-9]+): (condition expected): ?"?(.*)"?' ]]; then
		elif [[ $line =~ $'^(.+):([0-9]+): (not an identifier): ?(.*)' ]]; then
		elif [[ $line =~ $'^(.+):([0-9]+): (unmatched) (.*)' ]]; then
		elif [[ $line =~ $'^(.+):([0-9]+): ?"?`?(.*)"?\'?' ]]; then
		else
			techo -Pr "%F{9}${line}%f"
			continue
		fi
		
		print -Pr ${(@qqq)match}
	done
}

# Include a zsh lib
function include()
{
	local quiet verbose lpath lazyload required force
	local mtime info name
	zparseopts -D -M - l=lazyload p:=lpath -path:=lpath r=required -required=r \
		f=force q=quiet v:=verbose

	(( !$# )) && return 1
	verbose=${verbose[2]:-2}
	[[ -n $quiet ]] && verbose=0
	if [[ $1 = */* ]]; then
		lpath=${1:P}
		name=${${1:t}#zsh_}
	else
		name="${1#zsh_}"
		if [[ -n $lpath ]]; then
			lpath=$lpath[2]
		else
			lpath="$ZSH_LIBS/zsh_$name"
		fi
	fi
		
	required=$#required

	if [[ ! -f $lpath ]]; then
		techo -P "[%K{1}%F{15}FAIL%f%k] ${${required:#0}:+%F\{9\}Required }%F{11}$lpath %F{9}not found%f"
		if ((required)); then
			[[ ! -o interactive ]] && abort 127
		fi
		return 127
	fi

	mtime=$(stat -L --printf='%Y' $lpath) || techo -P "%F{9}stat error on %F{11}$lpath%f"
	info="ZSH_${(U)name}_INFO"

	if [[ -z ${(P)info} ||  # not loaded
		-n $force ||  # force load 
		${${(P)info}[mtime]} -lt $mtime ]] || # file was modified
		((
			${${(P)info}[err]} ||
			( ${${(P)info}[lazyload]} && ! $#lazyload )
		)) # has error or was lazy loaded 
	then 
		if ! zshLibReadHeader $lazyload $lpath; then
			techo -P "%F{11}$lpath %F{9}is not a zsh library%f"
			if ((required)); then
				[[ -o interactive ]] || abort 2
				return 2
			fi
			return 1
		fi

		if (($#lazyload)); then
			local llfuncs func
			if (($#HEADER[lazyload])); then
				# register a autoload function for each lazy load function
				explode -v llfuncs ${HEADER[lazyload]} ','
				for func in $llfuncs; do
					functions[$func]="include $quiet $name && {
						$func \"\$@\"
					}"
				done
			fi
			lib_set_info -l $name $VERSION "$lpath" $required "$mtime"
			return 0
		fi

		# [[ -o interactive ]] && 
		if ((verbose)); then
			techo -P -r "Including %F{11}$name%f ("${lpath/$ZSH_LIBS/"\\$"ZSH_LIBS}") [%F{2}$VERSION%f]"
		fi

		coproc parseErrors
		if source $lpath 2>&p; then
			lib_set_info $name $VERSION "$lpath" $required "$mtime"
			echo EOF >&p
			#[[ -o interactive ]] &&
		else
			local error error2 file line tmp split
			lib_set_info -E $name $VERSION "$lpath" $required "$mtime"
			echo EOF >&p
			(
				#@TODO sort errors by file before opening files
				while read -p tmp; do
					split=(${(Q)${(z)tmp}})
					file=$split[1]; line=$split[2]; error=$split[3]; error2=$split[4]
					techo -Pr "%F{3}$file:$line %F{9}${error}%f${error2:+" %K{1}%F{15}${error2}%f%k"}"
					#@TODO this is going to run once per terminal. Wanted: once total.
					#@idea run this part only on current terminal, if there is one focused.
				done
				if type v 2>&1 >/dev/null; then
					techo v $file:$line
				else
					${EDITOR:-vim} $file +$line
				fi
			)

			if ((required)); then
				techo -P "[%K{1}%F{15}FAIL%f%k] %F{9}Required %F{11}zsh_$name%F{9} not loaded%f"
				#@TODO[[ -o interactive ]] || abort 2
				abort 2
				return 2
			fi
			techo -P "[%K{1}%F{15}FAIL%f%k] %F{11}zsh_$name%F{9} not loaded%f"
			return $ret
		fi
	fi
}

function reload()
{
	local lib ll info libs=($(typeset -m 'ZSH_*_INFO' | cut -d'=' -f1))
	techo -c warn Reloading...
	for lib in $libs; do
		if [[ $lib =~ 'ZSH_(.*)_INFO' ]]; then
			info=ZSH_${match[1]}_INFO
			((${${(P)info}[lazyload]})) && ll=-l || ll=''
			include $ll ${(L)match[1]}
		fi
	done
}

function TRAPHUP() { reload }
#function TRAPINT() {
#	kill -$1 $$
#	return $((128+$1))
#}

#@TODO merge with chkCmd() from zsh_functions
comp+=("inst=apt")
function inst()
{
	local machine cmd pkgs pkg
	#zparseopts -D -M -
	if (($#)); then
		cmd=("$@")
	else
		#@TODO findcmd(use inAlias)
		cmd=(${$(fc -ln -1)[1]})
	fi
	for cmd in $cmd; do
		chkCmd $cmd
	done
}

comp+=("aptinst=apt")
function aptinst()
{
	sudo apt-get install -y $@
}

# Added 2019-09-05 00:57
# check if any item of array equals value
# in_array value array_name 
function in_array()
{
	_dbg_trap $0
	local name val _var ret _i
	zparseopts -D -M - v:=_var

	case $(vartype $2) in
	association*)
		_i=${(k)${(P)2}[(re)$1]}
		[[ -n $_i ]] || return 1
		;;
	array*)
		_i=${${(P)2}[(rei)$1]}
		((_i <= ${(P)#2})) || return 1
		;;
	*)
		techo -c err "\"$2\": not an array."
		print ${(P)2}
		abort 2 "not an array"
		return 2
	esac
	
	(($#_var)) && typeset -g "$_var[2]=$_i"
	return 0
}

#TODO call this within chooser
function match_array()
{
	_dbg_trap $0
	local _var field choose sep
	zparseopts -D -M - v:=_var f:=field c=choose s:=sep
	[[ -v $_var[2] ]] || return 1
	_var=${_var[2]:-REPLY}
	typeset -ga $_var
	typeset "$_var=(${(M)${(P)2}:#${1}*})"
	[ -t 1 ] || echo $_var
	if (($#choose)); then
		chooser -v $_var $field $sep ${(P)_var} || return
	else
		(($#_var))
	fi
}

# finds command(s) in an alias
function inAlias()
{
	_dbg_trap $0
	local needsFunc ret=1 arr ; integer cmd
	zparseopts -D -M - f=needsFunc
	if [[ $(type -f $1) =~ "^$1 is an alias for (.*)$" ]]; then
		local f m _type prefix=(run do_sudo) bins
		local integer command=0 glob=1 builtin=0
		for m in $=match[1]; do
			if [[ ${m:0:1} = [[:alpha:]] ]]; then
				_type=($(typeOf $m))

				if [[ $_type == 'none' ]]; then
					techo $m:none
					return 1
				fi

				if ((cmd)); then
					(($#needsFunc)) && return 1
					f=($(type -p $m))
					break
				elif ((builtin)); then
					_type='builtin'
					builtin=0
				fi

				if [[ $_type == 'builtin' ]]; then
					case $m in
						builtin) builtin=1
							;;
						command) cmd=1
							;;
						nocorrect)
							;;
						noglob) glob=0
							;;
						*) bins+=($m)
							;;
					esac
					continue
				fi

				in_array $m prefix && continue

				if [[ $_type == 'alias' ]]; then
					if [[ $m == $1 ]]; then
						if (($+functions[$m])) ; then
							f=$m
							break
						else
							return 1
						fi
					else
						tmp=($(inAlias $needsFunc $m)) || return 1
						f=($tmp[1])
						break
					fi
				fi

				if (($#needsFunc)); then # needs function
					if (($+functions[$m])) ; then # found a function
						f=$m
						break
					else
						return 1
					fi
				else
					f=($m $_type[1])
					break
				fi
			fi
		done

		if (($#f)); then
			echo -n $f
			ret=0
		elif ((! $#needsFunc)); then
			ret=0
		fi
		(($#bins)) && echo $^bins":builtin"
	fi
	return $ret
}

comp+=("do_sudo=sudo")
function do_sudo()
{
	_dbg_trap $0
	integer glob=1
	local _sopts user cmd
	
	include -r functions
	zparseopts -D -M - u:=user

	_sopts=(-H $user)
	(($# == 0)) && 1=/bin/zsh
	while (($#)); do
		case $1 in
			command|exec|-)
				cmd=1; shift
				break
			;;
			nocorrect)
				shift 
			;;
			noglob)
				glob=0; shift
			;;
			*) break
			;;
		esac
	done

	if (($#)); then
		if [[ $(typeOf -p $1) != (command|script)* ]]; then
			abort 1 "$1: command not found"
		fi
		#if [[ $(typeOf $1) == 'alias' ]]; then
		#	abort 1 "$1 is an alias"
			#local tmp=$(inAlias -f $1) || return 1
			#1=$tmp
		#fi
	else
		1=/bin/zsh
	fi

	if ((glob)); then
		sudo $_sopts env "PATH=$PATH" $~==*
	else
		sudo $_sopts env "PATH=$PATH" $==*
	fi
}

# Added 2019-11-18 19:33
function heredoc()
{
	IFS=$'\n' read -r -d '' $1 || true
}

function OPT_CHK()
{
	((${(P)#1})) && abort 127 "Option $C[warn]$@ $C[lred]not implemented" \
		"$C[warn]$functrace[1]$_C in $C[lgray]$funcfiletrace[1]"
}
#@untested check escaping
function ltrim() {
	echo "${*##[[:blank:]]##}"
}
function rtrim() {
	echo "${*%%[[:blank:]]##}"
}
function trim()
{
	echo "$(rtrim "$(ltrim "$*")")"
}

# Added 2019-09-03 19:29
function libmonitor()
{
	local name lastname evt pids
	float t lastt diff
	integer ts=0 lastts=0
	while read -r evt name ts; do
		[[ $evt == 'exit' ]] && break
		pids=($(pidof inotifywait 2>/dev/null))
		if (($#pids > 1)); then
			command kill ${pids:0:-1}
		fi
		((ts <= lastts + 0.5)) && [[ $name == $lastname ]] && continue
		techo -c warn "$evt $name $ts"
		((lastts = ts))
		lastname=$name
		t=$(date '+%s.%3N')
		((diff = t - lastt))
		if ((diff < 1.5)); then
			((diff = 1.5 - diff))
			sleep $diff
			((t += diff))
		fi
		((lastt = t))
		killall -HUP zsh
	done < <(inotifywait -m -q -e modify -r --format '%e %f %T' --timefmt '%s' "${(z)ZSH_LIBS:P}" || echo "exit $?")
	return $name
}

# "include" itself
lib_set_info main $VERSION "$0" 1 "$(stat -L --printf='%Y' "$0")"

#if [[ -o interactive ]] && { [[ -z $LIBMON_PID ]] || ! kill -0 $LIBMON_PID 2>/dev/null }; then
if [[ -o interactive ]] && ! pidof inotifywait 2>&1 >/dev/null; then
	while ! type inotifywait 2>&1 >/dev/null; do
		aptinst inotify-tools || {
			ret=$?
			(( ret==130 || ret==1 )) && break
		}
	done && { libmonitor &! }
#	done && { libmonitor & export LIBMON_PID=$! }
fi
