VERSION=1.0.5
#lazyload=sql,gettable,tableshow,tablelist,sqlError,usedb,dblist,dbtstamp,dbsize,sqldbdump,sqlEscape
alias sql="noglob sql"
alias sqlmaq="noglob sql --ssh maquina"

# databases data dir
DB_DATA_DIR=/var/lib/mysql
DBNAME='idiomus'

source $CFG/sql.cfg.zsh

typeset -gA rowIndex

# get last modification time of dbname(s)
# usage: dbtstamp dbname
function dbtstamp()
{
	usedb "$@"
	sudo ls -lrt --time-style=+"%Y-%m-%d %H:%M:%S" $DB_DATA_DIR/$db/ | \
		awk '{print $6,$7,$8}' | sort --numeric-sort
	}

function todosql__()
{
	sql --ssh maquina 'SELECT review_version_id, sequence, length, texts, timestamps, status FROM review_track WHERE review_version_id=184 ORDER BY updated_at' | {
		read cols ; while IFS=$'\t\t' read -r version_id sequence length texts timestamps _status ; do
			sqlQuote -v _texts $texts; sqlQuote -v _timestamps $timestamps
			sql "insert into review_track (review_version_id,sequence, length, texts, timestamps,status) values ($version_id, $sequence, $length, '$_texts', '$_timestamps', '$_status')"
		done
	}
}

function sqlEscape()
{
	if [[ $1 == 'NULL' ]]; then
		echo 'NULL'
	else
		echo ${(qq)"$(trim $1)"}
	fi
}

function sqlQuote()
{
	zparseopts -D -M - v:=var

	typeset -g "$var[2]=${1//(#m)[\']/\\$MATCH}"
}

# execute mysql command
# sql [-d dbname] [-f file.sql] SELECT ...
function sql()
{
	local file name verbose user pass silent host ret _out mysqlopts
	local _colsOut _cols _idVar _raw _opts
	integer p i _id

	typeset -g sql

	zparseopts -D -M -A _opts - f: d:=name n v=verbose u: -user:=u p: -pass:=p 't' -table=t \
		-ssh:=host o:=_out c:=_colsOut -columns:=c -id:=_idVar r=_raw 'i' --pager -nocolumns \
		-force 's'

	sql="$*"

	if (($+_opts[-f])); then
		file=$(getfullpath $_opts[-f])
		[[ -f $file ]] || abort --ex FileIoEx_NotFound 127 $file
	fi

	if ((! $+_opts[-i] && ! $+_opts[-s])); then # doesnt show in interactive or silent modes
		coproc parseSqlErrors; p=$!
	fi

	if [[ -n $host ]]; then # remote
		OPT_CHK file -f for remote
		#(($+file)) &&
		mysqlopts=(-d idiomus) # TODO
		#(($+_opts[-n])) || choose remote database
		if (($+_opts[-o])); then
			#@TODO
			#ssh $host[2] "noglob sql $mysqlopts ${(qq)sql}" 2>&p | \
			#	awkWrapper -F '\\t' --inc printFields -E - - - - 'printFields(1,-1)'
		else
			unset '_opts[--ssh]'
			remote_opts=("${(@kv)_opts}") # bypass local otions to remote
			if ((p)); then ssh $host[2] "include sql; noglob sql $remote_opts ${(qq)sql}" 2>&p
			else; ssh $host[2] "include sql; noglob sql $remote_opts ${(qq)sql}"; fi
		fi
		ret=$?
	else
		mysqlopts=()
		(($+_opts[-n])) || usedb $name[2]

		# credentials
		if [[ -n $db ]]; then
			user=${_opts[-u]:-${sqlUser[$db]:-$sqlUser[root]}}
			pass=${pass[2]:-$sqlPass[$user]}
		else
			user=${_opts[-u]:-$sqlUser[root]}
			pass=${pass[2]:-$sqlPass[$user]}
		fi
		(($+_opts[-p])) && pass=$_opts[-p]
		mysqlopts+=(${user:+-u$user} ${pass:+-p"$pass"})

		if (($+_opts[-i])); then # interactive mode
			mysql $mysqlopts $db
			return
		fi

		mysqlopts+=(-B $_raw --disable-auto-rehash) # batch mode, $silent
		mysqlopts+=(${_opts[--nocolumns]+--skip-column-names} ${_opts[-t]+-t} ${_opts[--force]+-f})

		# Safety
		(($+_opts[--limit])) && sqllimit=$_opts[--limit] || {
			[[ -v sqllimit ]] || sqllimit=2000
		}
		input -v sqllimit -p 'Row count limit (-1 for unlimited):'
		mysqlopts+=(--safe-updates --select-limit=$sqllimit)

		if (($+_opts[-o])); then
			i=1
			_out=$_out[2]
			if [[ $_out[-1] == <-> ]]; then
				input -v _out -p "Not allowed: $_out ends with a number. Ex: use an underscore" ${_out}_
			fi
			unset $_out$i
			rowIndex[$_out]=0 # track row index
			#@TODO: no error handling mode: redirect stderr to null
			(($#verbose)) && techo -r -c head mysql $mysqlopts -e ${(qq)sql} $db
			{
				# column names
				if IFS=$'\t\t' read -r -A _cols; then
					while { typeset -ga $_out$i ; IFS=$'\t\t' read -r -A $_out$i }; do
						((i++));
					done
					unset $_out$i
					((i--))
				fi
			} < <(mysql $mysqlopts -e $sql $db) 2>&p
			#mysql $mysqlopts -e $sql $db 2>&p | IFS=$'\t\t' read -A $_out[2]
			#awkWrapper $_out -F '\\t' --inc printFields -E - - - - 'printArgs(1,-1)'
			ret=$?
			if ((i)); then
				if (($#_colsOut)); then
					_colsOut=$_colsOut[2]
					typeset -gA $_colsOut
					integer colN=1
					for col in $_cols; do
						typeset -g "${_colsOut}[$col]=$colN"
						((colN++))
					done
				fi
			fi
		else
			#@TODO: no error handling: redirect stderr to null
			if (($#file)); then
				if [[ -f $file ]]; then
					(($#verbose)) && techo -r -c head mysql ${(qq)mysqlopts} $db '<' $file
					if ((p)); then mysql $mysqlopts $db < $file 2>&p
					else mysql $mysqlopts $db < $file; fi
					techo ret=$?
				else
					techo -c err "File not found$C_: $file"
					false
				fi
			else
				if (($#_idVar)); then
					# sql+="; SELECT ROW_COUNT(), LAST_INSERT_ID()"
					sql+="; SELECT LAST_INSERT_ID()"
					(($#verbose)) && techo -r -c head mysql $mysqlopts -s -e ${(qq)sql} $db
					_id=$(mysql $mysqlopts -s -e $sql $db) # 2>&p
				else
					(($#verbose)) && techo -r -c head mysql $mysqlopts -e ${(qq)sql} $db
					if ((p)); then mysql $mysqlopts -e "$sql" $db 2>&p
					else mysql $mysqlopts -e "$sql" $db; fi
				fi
			fi
			ret=$?
		fi
	fi
	((p)) && { echo EOF >&p ; wait $p }

	if ((ret==0)); then
		if (($#_idVar)); then
			typeset -g "${_idVar[2]}=$_id"
		fi
		return 0
	fi

	# Error handling
	#@TODO: noException mode
	#@TODO: if no error handling mode: just return or throw ret
	{
		local tmp split errCode sqlState line msg m Ex='SqlEx'
		#@TODO sort errors by file before opening files
		m=()
		if read -p errCode sqlState line tmp; then
			if [[ $errCode == '-' ]]; then
				#@TODO
				DEBUG=9 abort --ex SqlEx_Unknown 99 - ${sqlState:-'-'} ${line:-'-'} $tmp
			fi
			split=(${(Q)${(z)tmp}})
			if in_array -v i - '-' split; then # after '-' is the msg
				m=($split[1,i-1])
				#@ msg=$split[i+1,-1]
			fi
			if [[ $sqlState == '23000' ]]; then
				Ex='ConstraintSqlEx'
				ret=1
			else
				ret=2
			fi
			#(($#verbose)) && sqlError -v $errCode $sqlState $line $m
			sqlError -v $errCode $sqlState $line $m
			#@TODO this is going to run once per terminal. Wanted: once total.
			#@idea run this part only on current terminal, if there is one focused.
		else
			techo $errCode $sqlState $line $tmp
			DEBUG=9 abort --ex SqlEx_Unknown 99 'Unknown error'
		fi
		abort ${verbose:+-v3} --ex $Ex $ret $errCode $sqlState $line $m # - $msg"
	}
}

function sqlFetch()
{
	integer N
	(($+rowIndex[$1])) || return 1
	((N=++rowIndex[$1]))
	local var=$1$N
	((${(P)+var})) || return 1
	set -A $1 "${(P@)var}"
}

# Pretty print error messages.
# @opt? -v(verbose) Print error codes
# @param int $1 cod
# @param string $2 state
# @param line $3 int
# @print message
function sqlError()
{
	local msg='' _v=0 cod state line
	[[ $1 == '-v' ]] && { shift; _v=1 }
	cod=$1; state=$2; line=$3; shift 3
	((_v)) && msg="SQL Error $cod ($state)$C_ at line $line: "
	case $cod in
		1049) msg+="Can't connect to database $C[warn]'$1'$C_"
			;;
		1062) #uses the format string for 1586 (ER_DUP_ENTRY_WITH_KEY_NAME)
			msg+="Duplicate entry $C[warn]'$1'$C_ for key $C[warn]'$2'"
			;;
		1064) msg+="Syntax error near $C[warn]'$@'"
			;;
		145[12]) msg+="Constraint violation $C[warn]$3$C_: $C[warn]$2.$4$C_ REFERENCES $C[warn]$5.$6"
			;;
		*) local _args=("$@")
			# printf -v _args $msg"$(perror -s $cod)" $C[warn]$^_args$C_
			printf -v _args $msg"$(perror -s $cod)" $_args
			techo -c lred $_args
			return
			;;
	esac
	techo -c lred $msg
}

# Parses error string and returns error codes and relevant arguments.
# For most errors uses perror string format and reverse printf using regexp.
#
# @print errCode sqlState line arguments -
function parseSqlErrors()
{
	_dbg_trap $0
	local data
	while read -r data; do
		[[ $data == 'EOF' ]] && return
		if [[ $data =~ $'^ERROR ([0-9]{4}) \\(([0-9A-Z]{5})\\) at line ([0-9]+): (.*)' ]]; then
			local msg rx errCode sqlState msgFormat line
			msg=$match[4]
			errCode=$match[1]
			sqlState=$match[2]
			line=$match[3]

			# More info:
			#  https://www.ppgia.pucpr.br/pt/arquivos/techdocs/mysql/error-handling.html
			#  https://mariadb.com/kb/en/mariadb-error-codes/
			#  sql/share/errmsg-utf8.txt
			case $errCode in
				1062)
					#uses the format string for 1586 (ER_DUP_ENTRY_WITH_KEY_NAME)
					msgFormat="Duplicate entry '(.*)' for key '(.*)'"
					;;
				1064)
					msgFormat="near '(.*)'"
					;;
				145[12])
					msgFormat='^[^(]+\(`([^`]+)`.`([^`]+)`, CONSTRAINT `([^`]+)` FOREIGN KEY \(([^)]+)\) REFERENCES `([^`]+)` \(([^)]+)\)'
					#msgFormat="^[^(]+\\(\`([^\`]+)\`.\`([^\`]+)\`, CONSTRAINT \`([^\`]+)\` FOREIGN KEY \\(\`([^\`]+)\`\\) REFERENCES \`([^\`]+)\` \\(\`([^\`]+)\`"
					#	msgFormat="Cannot add or update a child row: a foreign key constraint fails (`¬tbl¬`.`#¬sql¬`, CONSTRAINT `#¬fk¬` FOREIGN KEY (`¬col¬`) REFERENCES `¬tbl¬` (`¬col¬`))"
					#ERROR 1452 (23000) at line 1: Cannot add or update a child row: a foreign key constraint fails (`idiomus`.`#sql-426_49`, CONSTRAINT `#sql-426_49_ibfk_1` FOREIGN KEY (`review_id`) REFERENCES `review` (`review_id`))
					;;
				*)
					if msgFormat=${"$(perror $errCode)"#*: }; then
						msgFormat=${msgFormat//(#m)[()]/'\'$MATCH}
						rx=(
							'%l#[du]'       '(-?[0-9]+)'
							'%-#.#[0-9]#[sM]' '(.*)'
							'\).' ')\.'
						)
						msgFormat=${msgFormat//${~rx[1]}/$rx[2]}
						msgFormat=${msgFormat//${~rx[3]}/$rx[4]}
						msgFormat='^'${msgFormat//${~rx[5]}/$rx[6]}
					else
						techo -c lred "Unknown error: $C[warn]$errCode$C_ ($sqlState)"
						continue
					fi
					;;
			esac

			if [[ $msg =~ $msgFormat ]]; then
				print -Pr $errCode $sqlState $line ${(@qqq)match} - #@ $msg
			else
				techo -c lred "$C[warn]$errCode$C_ ($sqlState)\n" "Message format doesn't match line"
				techo "format: $msgFormat, msg: $msg"
				print -Pr $errCode $sqlState $line - #@ $msg
			fi
		elif [[ $data =~ $'^Warning: (.*)' ]]; then
			techo -c warn $data
		else
			techo -c lred $data
			print -Pr - - - - - $data
		fi
	done
}

function isdb()
{
	[[ -n $1 ]] && [[ -d "$DB_DATA_DIR/$1" ]]
}

function usedb()
{
	integer error
	if [[ ${1:0:1} == '-' ]]; then
		local search s
		zparseopts -D -M - S:=search s:=s ; OPT_CHK s '-s(changed to -S)'
	fi
	if (($#)); then
		isdb $1 && { db=$1 ; return 0 }

		error=1
		techo -c lred "Database not found: \"$1\""
		if [[ -o interactive ]]; then
			(($#search)) || search=(-S $1)
		else
			abort --ex SqlEx_DbError 127 1049 42000 1 $1
		fi
	fi
	if [[ -z $db ]]; then
		#@TODO
		#${dbname:-$(box get dbname)}
		db=$(chooser ${DBNAME:+-D$DBNAME} $search $(dblist)) || return 1
	fi
	return 0
}

function dblist()
{
	sql -n 'show databases' | tail -n +2
}

function istable()
{
	[[ -n $db ]] || return
	sql "describe $1" >/dev/null 2>&1
}

function tablelist()
{
	sql 'show tables' | tail -n +2
}

function gettable()
{
	local S
	if [[ -n $1 ]]; then
		istable $1 && { echo $1; return }
		S=(-S $1)
	fi
	chooser $S $(tablelist)
}

function tableshow()
{
	local tblname args t result
	if [[ $1 == '-d' ]]; then
		usedb $2 || return
		shift 2
	else
		usedb || return
	fi
	[[ $1 == '-t' ]] && { shift; t=1 }
	tblname=$(gettable $1) || return
	if ((t)); then
		sql "describe $tblname"
	else
		echo $(tail -n +2 <(sql "show create table $tblname") | cut -f2-)
	fi
}

# shows a list of databases and their sizes
# usage: dbsize mydatabase
function dbsize()
{
	usedb "$@" || return
	sql -n 'SELECT table_name AS "Table Name", ROUND(((data_length + index_length) / 1024 / 1024), 2) AS "Size in (MB)" FROM information_schema.TABLES WHERE table_schema = "'$db'" ORDER BY (data_length + index_length)'
}

# Added 2019-03-23 23:36
function sqldbdump()
{
	local opts

	usedb "$@"
	if [[ -f $db.sql.bkup ]]; then
		techo -c warn "Saving backup $db.sql.bkup"
		mv $db.sql $db.sql.bkup
	fi

	# credentials
	if [[ -n $db ]]; then
		user=${_opts[-u]:-${sqlUser[$db]:-$sqlUser[root]}}
		pass=${pass[2]:-$sqlPass[$user]}
	else
		user=${_opts[-u]:-$sqlUser[root]}
		pass=${pass[2]:-$sqlPass[$user]}
	fi
	(($+_opts[-p])) && pass=$_opts[-p]
	opts+=(${user:+-u$user} ${pass:+-p"$pass"})
#--no-data
	mysqldump $db $opts --single-transaction --skip-add-drop-table | \
		sed -e 's/ AUTO_INCREMENT=[0-9]*\b//g' | \
		grep -v '^\/\*![0-9]\{5\}.*character_set_client.*\/;$' > $db.sql
	#t=calculo; mysqldump --no-create-info --extended-insert --password='Churr!4as678' -u $
}

# Added 2020-10-15 11:36
alias sqldbshow='sqldbstat'
function sqldbstat()
{
	local opts

	usedb "$@"

	tables=($(tablelist))
	user=$sqlUser[root]
	pass=$sqlPass[$user]
	opts+=(-u$user -p"$pass" --count)
	mysqlshow $opts $db
}
