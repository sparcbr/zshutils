VERSION=1.0.4
#lazyload=sql,tableshow,tablelist
alias sql="noglob sql"
alias sqlmaq="noglob sql --ssh maquina"
#head

# databases data dir
DB_DATA_DIR=/var/lib/mysql
DBNAME='idiomus'

typeset -gA sqlPass=(
	'sparc' 'my!7866'
	'idiomus' '#58dhAms$3xx'
)
typeset -gA sqlUser=(
	'root' 'sparc'
	'idiomus' 'idiomus'
)

# get last modification time of dbname(s)
# usage: dbtstamp dbname
function dbtstamp()
{
	usedb $1
	sudo ls -lrt --time-style=+"%Y-%m-%d %H:%M:%S" $DB_DATA_DIR/$db/ | \
		awk '{print $6,$7,$8}' | sort --numeric-sort
}

# execute mysql command
# sql [-d dbname] [-f file.sql] SELECT ...
function sql()
{
	local file name sql nodb verbose user pass silent host
	zparseopts -D - f:=file d:=name n=nodb v=verbose u:=user p:=pass s=silent -ssh:=host
	if [[ -n $file ]]; then
		file=$file[2]
		# [[ $file size greater than X lines ]] && 
			#  run mysqlimport -u $user -p$pass ql $db
			#  return
		sql=$(<$file)
	else
		sql="$*"
	fi

	typeset -Tf parseSqlErrors
	coproc parseSqlErrors
	if [[ -n $host ]]; then
		ssh $host[2] "noglob sql ${(qqq)sql}" 2>&p
	else
		[[ -n $nodb ]] || usedb $name[2]
		if [[ -n $db ]]; then
			user=${user[2]:-${sqlUser[$db]:-$root}}
			pass=${pass[2]:-$sqlPass[$user]}
		else
			user=${user[2]:-$sqlUser[root]}
			pass=${pass[2]:-$sqlPass[$user]}
		fi
		mysql $silent ${user:+-u$user} ${pass:+-p"$pass"} -e "$sql" $db 2>&p
	fi
	echo EOF >&p
	{
		local tmp split errCode sqlState line msg
		#@TODO sort errors by file before opening files
		while read -p errCode sqlState line tmp msg; do
			split=(${(Q)${(z)tmp}})
			#m=$split[1]; sqlState=$split[2]; line=$split[3]
			techo -c lred  "ERROR $errCode ($sqlState) at line $line: $C[warn]$msg$C_"
			#@TODO this is going to run once per terminal. Wanted: once total.
			#@idea run this part only on current terminal, if there is one focused.
		done
		if type v 2>&1 >/dev/null; then
			#v $file:$line &
		else
			#${EDITOR:-vim} $file +$line &
		fi
	}

	#ERROR 1452 (23000) at line 1: Cannot add or update a child row: a foreign key constraint fails (`idiomus`.`#sql-426_49`, CONSTRAINT `#sql-426_49_ibfk_1` FOREIGN KEY (`review_id`) REFERENCES `review` (`review_id`))
}

function parseSqlErrors()
{
	local line
	while read line; do
		[[ $line == 'EOF' ]] && return
		techo line=${(q)line}
		if [[ $line =~ $'^ERROR ([0-9]{4}) \\(([0-9A-Z]{5})\\) at line ([0-9]+): (.*)' ]]; then
			local rx msg errCode sqlState msgFormat
			msg=$match[4]
			errCode=$match[1]
			sqlState=$match[2]
			line=$match[3]

			case $errCode in
			1064)
				msgFormat="near '(.*)'" ;;
				# ".* error.* near '(.*)'" ;;
				# "(Unknown) (column) '(\w+)' in '.+" ;;
			*)
				if msgFormat=${"$(perror $errCode)"##*: }; then
					rx=(
						'%(l#[du])'       '(-?[0-9]+)'
						'%-#.#[0-9]#[sM]' '(.*)'
					)
					msgFormat=${msgFormat//${~rx[1]}/$rx[2]}
					msgFormat=${msgFormat//${~rx[3]}/$rx[4]}
				else
					techo -Pr "Unknown error: %F{9}$errCode%f ($sqlState)"
					continue
				fi
				;;
			esac

			if [[ $msg =~ $msgFormat ]]; then
				techo -c lred -r "format: $msgFormat"
				techo -c lred -r "match: ($match)"
				print -Pr $errCode $sqlState $line ${(@qqq)match} - $msg
			else
				techo -c lred -r "Error message format doesn't match line"
				techo -c lred -r $msgFormat
				techo -c lred -r $msg
				techo -c lred -Pr "Unknown error: %F{9}$errCode%f ($sqlState)"
			fi
		else
			techo -c lred $line
		fi
	done
}

function isdb()
{
	[[ -n $1 ]] && [[ -d "$DB_DATA_DIR/$1" ]]
}

function usedb()
{
	#@TODO
	#${${dbname:-$(proj get dbname)}}
	[[ $1 == '-s' ]] && { db= ; shift }
	if (($#)); then
		isdb $1 && db=$1 || abort 127 "$1: database not found"
	elif [[ -z $db ]]; then
		db=$(chooser ${DBNAME:+-D$DBNAME} $(dblist))
	fi
}

function dblist()
{
	sql -n 'show databases' | tail -n +2
}

function istable()
{
	[[ -n $db ]] || return 
	sql "describe $1" >/dev/null 2>&1
}

function tablelist()
{
	sql 'show tables' | tail -n +2
}

function gettable()
{
	local S
	if [[ -n $1 ]]; then
		istable $1 && { echo $1; return }
		S=(-S $1)
	fi
	chooser $S $(tablelist)
}

function tableshow()
{
	local tblname args t result
	if [[ $1 == '-d' ]]; then
		usedb $2 || return
		shift 2
	else
		usedb || return
	fi
	[[ $1 == '-t' ]] && { shift; t=1 }
	tblname=$(gettable $1) || return
	if ((t)); then
		sql "describe $tblname"
	else
		echo $(tail -n +2 <(sql "show create table $tblname") | cut -f2-)
	fi
}

# shows a list of databases and their sizes
# usage: dbsize mydatabase
function dbsize()
{
	usedb "$@" || return
	sql -n 'SELECT table_name AS "Table Name", ROUND(((data_length + index_length) / 1024 / 1024), 2) AS "Size in (MB)" FROM information_schema.TABLES WHERE table_schema = "'$db'" ORDER BY (data_length + index_length)'
}

# Added 2019-03-23 23:36
function sqldbdump()
{
	usedb "$@"
	if [[ -f $db.sql.bkup ]]; then
		techo -c warn "Saving backup $db.sql.bkup"
		mv $db.sql $db.sql.bkup
	fi
	mysqldump $db --no-data --single-transaction --skip-add-drop-table | \
		sed -e 's/ AUTO_INCREMENT=[0-9]*\b//g' | \
		grep -v '^\/\*![0-9]\{5\}.*character_set_client.*\/;$' > $db.sql
}
