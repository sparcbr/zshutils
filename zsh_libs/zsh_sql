VERSION=1.0.5
#lazyload=sql,gettable,tableshow,tablelist,sqlError,usedb,dblist,dbtstamp,dbsize,sqldbdump
alias sql="noglob sql"
alias sqlmaq="noglob sql --ssh maquina"

# databases data dir
DB_DATA_DIR=/var/lib/mysql
DBNAME='idiomus'

typeset -gA sqlPass=(
	'sparc' 'my!7866'
	'idiomus' '#58dhAms$3xx'
)
typeset -gA sqlUser=(
	'root' 'sparc'
	'idiomus' 'idiomus'
)

# get last modification time of dbname(s)
# usage: dbtstamp dbname
function dbtstamp()
{
	usedb "$@"
	sudo ls -lrt --time-style=+"%Y-%m-%d %H:%M:%S" $DB_DATA_DIR/$db/ | \
		awk '{print $6,$7,$8}' | sort --numeric-sort
}

# execute mysql command
# sql [-d dbname] [-f file.sql] SELECT ...
function sql()
{
	local file name sql nodb verbose user pass silent host ret _out opts
	local _colsOut _cols
	integer i
	zparseopts -D -M - f:=file d:=name n=nodb v=verbose u:=user p:=pass s=silent \
		-ssh:=host o:=_out c:=_colsOut -columns:=c

	sql="$*"

	opts=($silent)
	coproc parseSqlErrors
	if [[ -n $host ]]; then # remote
		OPT_CHK file -f for remote
		#(($#file)) && file=$file[2]
		if (($#_out)); then
			ssh $host[2] "noglob sql $opts ${(qqq)sql}" 2>&p | \
				awkWrapper -F '\\t' --inc printFields -E - - - - 'printFields(1,-1)'
		else
			ssh $host[2] "noglob sql $opts ${(qqq)sql}" 2>&p
		fi
		ret=$?
	else
		[[ -n $nodb ]] || usedb $name[2]
		if [[ -n $db ]]; then
			user=${user[2]:-${sqlUser[$db]:-$root}}
			pass=${pass[2]:-$sqlPass[$user]}
		else
			user=${user[2]:-$sqlUser[root]}
			pass=${pass[2]:-$sqlPass[$user]}
		fi
		opts+=(${user:+-u$user} ${pass:+-p"$pass"})
		if (($#_out)); then
			i=1
			_out=$_out[2]
			{
				# column names
				if IFS=$'\t\t' read -A _cols; then
					# read rows into associative arrays: row1, row2, ..., rowN
					#	with column names as keys
					typeset -ga $_out$i
					while IFS=$'\t\t' read -A $_out$i; do
						((i++)); typeset -ga $_out$i
					done
					unset $_out$i
					((i--))
				fi
			} < <(mysql $opts -e $sql $db) 2>&p
			#mysql $opts -e $sql $db 2>&p | IFS=$'\t\t' read -A $_out[2]
				#awkWrapper $_out -F '\\t' --inc printFields -E - - - - 'printArgs(1,-1)'
			ret=$?
			if ((i)); then
				if (($#_colsOut)); then
					_colsOut=$_colsOut[2]
					typeset -gA $_colsOut
					integer colN=1
					for col in $_cols; do
						typeset -g "${_colsOut}[$col]=$colN"
						((colN++))
					done
				fi
			fi
		else
			if (($#file)); then
				mysql $opts $db 2>&p < $file[2]
			else
				mysql $opts -e $sql $db 2>&p
			fi
			ret=$?
		fi
	fi
	echo EOF >&p

	((ret)) || return 0

	# Error handling
	{
		local tmp split errCode sqlState line msg m Ex='SQLEX'
		#@TODO sort errors by file before opening files
		m=()
		if read -p errCode sqlState line tmp; then
			if [[ $errCode == '-' ]]; then
				#@TODO
				DEBUG=9 abort --ex SQLEX_UNKNOWN 99 - ${sqlState:--} ${line:--} $tmp
			fi
			split=(${(Q)${(z)tmp}})
			if in_array -v i - '-' split; then # after '-' is the msg
				m=($split[1,i-1])
				msg=$split[i+1,-1]
			fi
			sqlError -v $errCode $sqlState $line $m
			if ((sqlState == 23000)); then
				Ex='SQLEX_CONSTRAINT'
				ret=1
			else
				ret=2
			fi
			#@TODO this is going to run once per terminal. Wanted: once total.
			#@idea run this part only on current terminal, if there is one focused.
		else
			techo $errCode $sqlState $line $tmp
			DEBUG=9 abort 99 'Unknown error'
		fi
		abort --ex $Ex $ret "$errCode $sqlState $line $m" # - $msg"
	}
}

function sqlError()
{
	local msg='' _v=0
	if [[ $1 == '-v' ]]; then
		local cod=$2 state=$3 line=$4
		shift 4
		_v=1
		msg="ERROR $cod ($state)$C_ at line $line: "
	else
		cod=$1; shift
	fi

	case $cod in
		1049) msg+="Can't connect to database $C[warn]'$1'$C_"
		;;
		1062) msg+="Duplicate entry $C[warn]'$1'$C_ for key $C[warn]'$2'$C_"
		;;
		1064) msg+="Syntax error near $C[warn]'$@'"
		;;
		1452) msg+="$C[warn]$2.$4$C_ REFERENCES $C[warn]$5.$6$C_ CONSTRAINT $C[warn]$3$C_"
		;;
		*) printf $C[lred]$msg"$(perror -s $cod)$C_\n" "$@"
			return
		;;
	esac
	echo -n $C[lred]$msg$C_
}

function parseSqlErrors()
{
	_dbg_trap $0
	local data
	while read data; do
		[[ $data == 'EOF' ]] && return
		if [[ $data =~ $'^ERROR ([0-9]{4}) \\(([0-9A-Z]{5})\\) at line ([0-9]+): (.*)' ]]; then
			local msg rx errCode sqlState msgFormat line
			msg=$match[4]
			errCode=$match[1]
			sqlState=$match[2]
			line=$match[3]
			
			# More info:
			#  https://www.ppgia.pucpr.br/pt/arquivos/techdocs/mysql/error-handling.html
			#  https://mariadb.com/kb/en/mariadb-error-codes/
			#  sql/share/errmsg-utf8.txt
			case $errCode in
			1062) 
				#uses the format string for 1586 (ER_DUP_ENTRY_WITH_KEY_NAME)
				msgFormat="Duplicate entry '(.*)' for key '(.*)'"
				;;
			1064)
				msgFormat="near '(.*)'"
				techo "msg: $msg"
				;;
			1452)
				msgFormat="^[^(]+\\(\`([^\`]+)\`.\`([^\`]+)\`, CONSTRAINT \`([^\`]+)\` FOREIGN KEY \\(\`([^\`]+)\`\\) REFERENCES \`([^\`]+)\` \\(\`([^\`]+)\`"
			#	msgFormat="Cannot add or update a child row: a foreign key constraint fails (`¬tbl¬`.`#¬sql¬`, CONSTRAINT `#¬fk¬` FOREIGN KEY (`¬col¬`) REFERENCES `¬tbl¬` (`¬col¬`))"
			#	;;
	#ERROR 1452 (23000) at line 1: Cannot add or update a child row: a foreign key constraint fails (`idiomus`.`#sql-426_49`, CONSTRAINT `#sql-426_49_ibfk_1` FOREIGN KEY (`review_id`) REFERENCES `review` (`review_id`))
				;;
			*)
				if msgFormat=${"$(perror $errCode)"##*: }; then
					rx=(
						'%(l#[du])'       '(-?[0-9]+)'
						'%-#.#[0-9]#[sM]' '(.*)'
					)
					msgFormat=${msgFormat//${~rx[1]}/$rx[2]}
					msgFormat='^'${msgFormat//${~rx[3]}/$rx[4]}
				else
					techo -c lred "Unknown error: $C[warn]$errCode$C_ ($sqlState)"
					continue
				fi
				;;
			esac

			if [[ $msg =~ $msgFormat ]]; then
				print -Pr $errCode $sqlState $line ${(@qqq)match} - $msg
			else
				techo -c lred "$C[warn]$errCode$C_ ($sqlState)\n" \
					"Message format doesn't match line"
				techo "format: $msgFormat"
				print -Pr $errCode $sqlState $line - $msg
			fi
		else
			techo -c lred $data
			print -Pr - - - - - $data
		fi
	done
	techo 'parseErrors ended'
}

function isdb()
{
	[[ -n $1 ]] && [[ -d "$DB_DATA_DIR/$1" ]]
}

function usedb()
{
	if [[ ${1:0:1} == '-' ]]; then
		local search s
		zparseopts -D -M - S:=search s:=s ; OPT_CHK s '-s(changed to -S)'
	fi
	if (($#)); then
		isdb $1 && db=$1 || {
			if [[ -o interactive ]]; then
				(($#search)) || search=(-S $1)
			else
				abort --ex SQLEX_DBERROR 127 1049 42000 1 $1
			fi
		}
	fi
	if [[ -z $db ]]; then
		#@TODO
		#${dbname:-$(box get dbname)}
		db=$(chooser ${DBNAME:+-D$DBNAME} $search $(dblist))
	fi
}

function dblist()
{
	sql -n 'show databases' | tail -n +2
}

function istable()
{
	[[ -n $db ]] || return 
	sql "describe $1" >/dev/null 2>&1
}

function tablelist()
{
	sql 'show tables' | tail -n +2
}

function gettable()
{
	local S
	if [[ -n $1 ]]; then
		istable $1 && { echo $1; return }
		S=(-S $1)
	fi
	chooser $S $(tablelist)
}

function tableshow()
{
	local tblname args t result
	if [[ $1 == '-d' ]]; then
		usedb $2 || return
		shift 2
	else
		usedb || return
	fi
	[[ $1 == '-t' ]] && { shift; t=1 }
	tblname=$(gettable $1) || return
	if ((t)); then
		sql "describe $tblname"
	else
		echo $(tail -n +2 <(sql "show create table $tblname") | cut -f2-)
	fi
}

# shows a list of databases and their sizes
# usage: dbsize mydatabase
function dbsize()
{
	usedb "$@" || return
	sql -n 'SELECT table_name AS "Table Name", ROUND(((data_length + index_length) / 1024 / 1024), 2) AS "Size in (MB)" FROM information_schema.TABLES WHERE table_schema = "'$db'" ORDER BY (data_length + index_length)'
}

# Added 2019-03-23 23:36
function sqldbdump()
{
	usedb "$@"
	if [[ -f $db.sql.bkup ]]; then
		techo -c warn "Saving backup $db.sql.bkup"
		mv $db.sql $db.sql.bkup
	fi
	mysqldump $db --no-data --single-transaction --skip-add-drop-table | \
		sed -e 's/ AUTO_INCREMENT=[0-9]*\b//g' | \
		grep -v '^\/\*![0-9]\{5\}.*character_set_client.*\/;$' > $db.sql
}
