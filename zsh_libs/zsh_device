VERSION=1.0.5
#lazyload=imageMount,findDev,lspart,labelof,deviceMount,dirUnmount,deviceUnmount,diskUnmount,deviceOff,diskMount,sd,mountSD,deviceInfo,findSD,loopof,mntof,deviceof,fstypeof,isDirMounted,imageof,loop,unloop,ptablecp,sdd,ejectSD
alias image='imageMount'
alias diskOff='deviceOff'

setopt extendedglob

NOBLKDEV=32
MNTBUSY=33
DEVERR[32]='not a block device'
DEVERR[33]='dir busy. Another device mounted here.'
function abortDevError()
{
	local cod=$1 ret
	ret=${(P)cod}
	abort $ret "ERR$cod: \"$2\" - ${DEVERR[$ret]}"
}

function findDev()
{
	local devin="$1"
	if [[ ! -b "$devin" ]]; then
		devin=$(isDevice $devin) && [[ -b "$devin" ]] || return 1
	fi
	echo "$devin"
}

#@bug: shows partition as not mounted while it was really mounted
function lspart()
{
	awk "! /SWAP|(\/snap\/)|(system reserved)/" \
		<(sudo lsblk -o NAME,LABEL,SIZE,FSTYPE,UUID,MOUNTPOINT,SERIAL "$@")

	grep -v '/snapd/' <(losetup --noheadings -l -O NAME,BACK-FILE) | sort
}

function sizeToKb()
{
	echo "$1" | sed 's/Gb\?/ * 1024 M/i; s/Mb\?/ * 1024 K/i; s/Kb\?//i' | bc
}

function sizeCompare()
{
	local s1 s2
	s1=$(sizeToKb $1) ;  s2=$(sizeToKb $2)
	[[ "$s1" -lt "$s2" ]] && echo -1 && return
	[[ "$s1" -gt "$s2" ]] && echo 1 && return
	echo 0
}
function labelof()
{
	lsblk $1 -n -o FSTYPE
}

function deviceMount()
{
	local integer ret err=0 i
	local var dev devs mnt baseMnt remount tmp
	zparseopts -D -M - m:=baseMnt r=remount
	[[ -n "$1" ]] || return 1
	[[ -n $baseMnt ]] && baseMnt=$baseMnt[2] || baseMnt=/m
	
	typeset -a devs
	for dev; do
		var=$(isDevice $dev)
		if [[ $? -eq 0 ]]; then
			tmp=$(udisksctl info -b $var | awk "match(\$0, /'dir': <b'([^']+)'/, a) {print a[1]}")
			if [[ -n $tmp ]]; then
				sudo udisksctl mount -b $var
			else
				devs+=($var)
			fi
		elif isDir $dev; then
			dev=$(awk -v needle="$var" '$2==needle {print $1}' /etc/fstab 2>/dev/null)
			if [[ -n $dev ]]; then
				[[ -b $dev ]] || dev=$(blkid --uuid $(explode $dev '=' 2)) || return 1
				tmp=$(run udisksctl mount -b $dev 2>&1)
				[[ $? -ne 0 && "$tmp" != *already\ mounted* ]] && ((err++))
			else
				mnt=$var
			fi
		elif confirm "Create dir $var"; then
			run -S mkdir $var || return
			mnt=$var
		else
			cancel
		fi
	done

	if [[ $#devs -eq 1 ]] && [[ -n $mnt ]]; then
		dev=$devs[1]
		var=$(isDeviceMounted "$dev" "$mnt")
		ret=$?
		[[ $ret -ne 2 || -n $remount ]] || return 0
		if [[ $ret -eq 0 ]]; then
			techo -c red "$dev already mounted ($var)"
			confirm Remount on $mnt && deviceUnmount $dev || return 0
		fi
		var=$(isDirMounted $mnt $dev)
		ret=$?
		[[ $ret -eq 2 ]] && return 0
		[[ $ret -eq 0 ]] && {
			deviceUnmount $var || abortDevError MNTBUSY "$mnt ($var)"
		}
		run -s -p "mount $dev" mount $dev $mnt

	elif [[ $#devs -ge 1 ]]; then
		local parts line TYPE NAME SIZE FSTYPE LABEL MOUNTPOINT pids
		parts=("${(f)$(deviceInfo -t part --short $devs)}")
		for line in $parts; do
			eval $line
			if [[ -n "$MOUNTPOINT" ]]; then
				techo -c warn "$NAME already mounted on $MOUNTPOINT"
				continue
			fi
			if [[ -z "$FSTYPE" ]]; then
				#@ no label, try to redetect, 
				# ask user to give a label
				techo -c red "$NAME: no file system detected"
				((err++))
				continue
			fi
			deviceMount $NAME "$baseMnt/$LABEL" || ((err++))
		done
		((err==0)) && techo $OK || techo -c warn $err errors
		return $err
	fi
}
#@TODO In the case of more than one mount of same device,
# all of them are unmounted
function dirUnmount()
{
	local err=0 dir dev
	for dir; do
		if [[ -d "$dir" ]]; then
			if dev=$(isDirMounted $dir); then
				deviceUnmount $dev || ((err++))
			fi
		else
			techo -c err "\"$dir\"$C_$C[red]: not a directory"
			((err++))
		fi
	done
	return $err
}

function deviceUnmount()
{
	local err=0 used var mnt dev
	local integer ret i
	zparseopts -D -M - u:=used -used:=u
	for dev; do
		dev=$(isDevice $dev) || {
			isDir $dev && dirUnmount $dev || { ((err++)); techo -c warn $dev is not a device; continue }
			continue
		}

		mnt=$(isDeviceMounted $dev) || continue
		var=$(run -s -p "Unmounting $dev ($mnt)" udisksctl unmount -b $dev 2>&1) && continue
		var=$(run -s umount $dev 2>&1)
		if [[ $var = *busy* ]]; then
			var=$(egrep -v '^(lsof|sudo|grep) ' <(sudo lsof $mnt))
			echo $var
			egrep '^adb ' <<< $var && {
				run adb kill-server
				isDeviceMounted $dev || continue
			}
			i=0
			while ! var=$(run -s umount $dev 2>&1) && [[ $i -lt 4 ]]; do
				isDeviceMounted $dev || continue
				if [[ "$var" = *busy* ]]; then
					techo -c warn "$mnt is busy"
					var=$(egrep -v '^(lsof|sudo|grep) ' <(sudo lsof -f -- $mnt))
					echo $var
					egrep '^zsh ' <<< $var #@ show which shells are occupying $mnt
				fi
				((i++))
				sleep 1
			done
		fi
		isDeviceMounted $dev && ((err++))
	done
	return $err
}

function diskUnmount()
{
	local dev parts eject force
	zparseopts -D -M - e=eject f=force
	dev=$(isDevice $1) || return 1
	parts=($(grep 'MOUNTPOINT=".\+"' <(deviceInfo -o NAME,MOUNTPOINT -t part $dev) | cut -d '"' -f 4))
	if (($#parts)); then
		if [[ -z $force ]]; then
			techo $parts
			confirm "unmount all" || cancel 
		fi
		deviceUnmount $parts
	fi
	[[ -n $eject ]] && run -s eject $dev
}

function deviceOff()
{
	if dev=$(isDevice $1); then
		if diskUnmount $dev; then
			sudo udisksctl power-off -b $dev
		fi
	fi
}

function diskMount()
{
	local mnt dev parts line devtmp err=0 pnum
	zparseopts -D -M - m:=mnt p:=pnum
	
	dev=${1:-$(chooser $(deviceInfo -d))}
	dev="/dev/${dev#/dev/}"
	[[ -b "$dev" ]] || abortDevError NOBLKDEV "$1"
	
	#@TODO: use disk uuid or disk identifier as default?
	[[ -n "$mnt" ]] && mnt="${mnt[2]}" || mnt="${2:-/m}"
	isDir -m "$mnt" || return

	[[ -n $pnum ]] && pnum="[${pnum[2]}]" || pnum='[0-9]'
	deviceMount -m $mnt ${dev}${~pnum}
}

#@TODO SD wrapper util
# Status
# NODEVICE: no devices detected
# NOMEDIUM: no card detected
# NOPARTS: no partitions
# NOMOUNTS: no mounted partitions
# SOMEMOUNTS: not all partitions mounted
# ALLMOUNTS: all mounted
function sd()
{
	local stat cmd
	sdDev=$(findSD -ld) || return
	stat=SOMEMOUNTS
	case "$stat" in
		(SOME|ALL)MOUNTS)
			mountSD $sdDev
			;;
	esac
}

function mountSD()
{
	local dev mnt p
	zparseopts -D -M - m:=mnt p:=p
	if [[ -n $1 ]] && isSD $1; then
		dev=$1 ; shift
	else
		dev=$(findSD -ld) || return
	fi
	if [[ -z $mnt ]]; then
		isDir $1 && { mnt=(-m $1); shift } || mnt=(-m /m/SD)
	fi
	[[ -z $p && $# -gt 0 ]] && p=(-p "$*")
	diskMount $p $mnt $dev
}

function deviceInfo()
{
	local ret columns hotplug diskOnly args
	local all short type data mounted mpat
	zparseopts -D -M - h=hotplug d=diskOnly a=all m=mounted \
		s=short -short=s t:=type -type:=t o:=columns u=mounted

	if [[ -n $columns ]]; then
		explode -u -v columns "TYPE,$columns[2]" ','
	else
		columns=(TYPE NAME SIZE FSTYPE LABEL MOUNTPOINT)
		if [[ -z "$short" ]]; then
			columns+=(STATE VENDOR MODEL SERIAL HOTPLUG RM)
		fi
	fi

	if [[ -n $mounted && ${columns[(i)MOUNTPOINT]} -gt $#columns ]]; then
		columns+=(MOUNTPOINT)
	fi

	if [[ -n $hotplug && ${columns[(i)HOTPLUG]} -gt $#columns ]]; then
		columns+=(HOTPLUG RM)
	fi

	[[ -z $columns ]] && abort 1 'No column chosen'

	args=($all $diskOnly --include 8 -o ${(j.,.)columns} --noheadings --pairs)
	data=$(sudo lsblk $args "$@")
	ret=$?
	[[ -n "$diskOnly" ]] && type=disk || type=$type[2]
	[[ -n "$hotplug" ]] && data=$(egrep 'HOTPLUG="1" RM="1"' <<<$data)
	[[ -n "$type" ]] && data=$(egrep '^TYPE="'$type'"' <<<$data)
	if [[ -n "$mounted" ]]; then
		[[ $mounted == '-m' ]] && mpat='.+'
		data=$(egrep -o "MOUNTPOINT=\"$mpat\"" <<<$data)
	fi
	echo "$data"
	return $ret
}

SDCARDSIZELIMIT='32G'
function isSD()
{
	local size=$2
	[[ -z $1 || ! -b $1 ]] && return 1
	[[ -z $2 ]] && size=$(sudo blockdev --getsz $1 2>/dev/null) || return
	[[ $(sizeCompare "$size /2" $SDCARDSIZELIMIT) -le 0 ]]
	#@techo -c warn "if this is a mistake, setup a new size limit"
	#input -e '[[:digit:]][MG]' -p "Enter new size limit for SD cards" var
	#config set SDCARDSIZELIMIT $var
}

function findSD()
{
	local var parts disks disk sdDev found
	local integer i n=0 tries=1
	local TYPE NAME SIZE RM HOTPLUG FSTYPE LABEL MOUNTPOINT STATE VENDOR MODEL SERIAL
	local loop diskOnly oldDev cmd

	zparseopts -D -M -- l=loop d=diskOnly o:=oldDev -cmd:=cmd

	typeset -a found
	sdDev=$SDDEV
	[[ -n $loop ]] && tries=1000
	while ((n++ < tries))  && ! isSD $sdDev; do
		((n > 1)) && sleep 1
		disks=("${(@f)$(deviceInfo -hda)}")
		if [ $? -ne 0 ]; then
			techo -c err 'No removable devices found'
			continue
		fi
		i=1
		found=()
		for line in $disks; do
			eval $line 
			if [[ -z "$SIZE" || -z "$SERIAL" ]]; then
				techo -c warn "/dev/$NAME: $VENDOR $MODEL skipping: " \
					"size=$SIZE, serial=$SERIAL : no media?"
			elif [[ $(sizeCompare "$SIZE" $SDCARDSIZELIMIT) -gt 0 ]]; then
				techo -c warn "/dev/$NAME: $VENDOR $MODEL $SERIAL skipping: too big ($SIZE)"
				#@techo -c warn "if this is a mistake, setup a new size limit"
				#input -e '[[:digit:]][MG]' -p "Enter new size limit for SD cards" var
				#config set SDCARDSIZELIMIT $var
			else
				found+=("/dev/$NAME size=$SIZE state=$STATE vendor=$VENDOR model=$MODEL serial=$SERIAL")
			fi
			((i++))
		done

		#@TODO use a simple chooser 
		if [[ $#found -gt 1 ]]; then
			var=(${=$(chooser $found)})
		elif [[ -n $found ]]; then
			var=(${=found})
		else
			var=
			techo -c err 'No SD devices found'
		fi
		sdDev=$var[1]
	done
	isSD $sdDev || { SDDEV= ; return 1 }
	techo -c ok SD=$sdDev
	SDDEV=$sdDev
	echo $sdDev
	[[ -z $diskOnly ]] && echo "$(deviceInfo -st part $sdDev)"
	return 0

		#if [[ "$CURRENTSDINFO" != "$var" ]]; then
		#	techo "Device changed: $dev"
		#	CURRENTSDINFO=($var)
		#fi

	#for i in $found; do
	#	disk=${disks[$i]}
	#	eval $disk
	#	echo $NAME size=$SIZE state=$STATE vendor=$VENDOR model=$MODEL serial=$SERIAL
	#	# udevadm info -n $NAME #| grep 'SD Reader'
	#	# ID_SERIAL=Generic_USB_SD_Reader_058F312D81B-0:0
	#	# ID_MODEL=USB_SD_Reader
	#	fparts=("${(@f)$(printf "%s\n" ${parts[@]} | egrep "NAME=\"${NAME}[0-9]+\"")}")
	#	for line in $fparts; do
	#		eval $line
	#		if [[ -n "$NAME" ]]; then
	#			techo $NAME size=$SIZE fstype=$FSTYPE label=$LABEL mount=$MOUNTPOINT
	#		fi
	#	done
	#done
}

function isLoop()
{
	local loop dev=$1
	[[ $dev = [0-9]## ]] && dev=/dev/loop$dev
	if [[ $dev = (#b)(/dev/(mapper/)#)#loop([0-9]##)(p[0-9]##)# ]]; then
		loop=$match[3]
		[[ -n $match[4] ]] && dev=/dev/mapper/loop$loop$match[4] || dev=/dev/loop$loop
		echo $dev
		return 0
	fi
	echo $1
	return 1
}

# Added 2019-02-31 15:06:30
# and exists?
function isDevice()
{
	local dev=$1
	if dev=$(isLoop $dev); then
		echo $dev
		return 0
	fi
	if [[ -b $dev ]]; then # is device
		getfullpath $dev
		return
	fi
	if [[ ${dev:0:5} = /dev/ ]]; then # ghost device
		getfullpath $dev
		return
	fi
	if [[ -f $dev ]]; then # file
		echo $dev
		return 1
	fi
	if isDir $dev || [[ ${dev:0:1} = / ]]; then # not a device
		echo $dev
		return 1
	fi
	isDevice /dev/$dev # try again
}

# Find loop device of image file
function loopof()
{
	local dev
	if [[ ! -f $1 ]]; then
		techo -c lred "$1: file not found"
		return 127
	fi
	dev=$(losetup -j "$1" -O NAME --noheadings)
	[[ -n $dev ]] && echo $dev
}

# Added 2019-02-25 11:06:30
function mntof()
{
	local dev loop
	dev=$(isDevice $1) || dev=$(loopof $dev) || return
	awk -v needle="$dev" '$1==needle {print $2}' /proc/mounts 2>/dev/null
}

function isDeviceMounted()
{
	local mnt="$(mntof $1)" 
	[[ -z "$mnt" ]] && return 1 # not mounted
	[[ -n "$2"  && "$mnt" = "$(getfullpath "$2")" ]] && return 2 # mounted already on right place
	echo $mnt
	return 0 # mounted
}

# $1: dir/file
# @return: device mounted on $1
function deviceof()
{
	local arg=${(z)1}
	if [[ "${arg:0:1}" != / && ! -f $arg ]]; then
		arg="/m/$arg"
	fi
	if [[ -d $arg ]]; then
		awk -v needle="$(getfullpath "$arg")" '$2==needle {print $arg}' /proc/mounts 2>/dev/null
	elif [[ -f $arg ]]; then
		loopof $arg
	fi
}

function fstypeof()
{
	df --output=fstype "$1" | tail +2
}

function isDirMounted()
{
	local dev=$(deviceof "$1")
	[[ -z "$dev" ]] && return 1 # mounted on wrong place
	[[ "$dev" = "$2" ]] && return 2 # mounted on right place
	echo $dev
	return 0 # mounted
}

# take a mount dir, loop device or loop number
# $1: dir|[[/dev/]loop]N
# return: associated image file
function imageof()
{
	local name=$1 loopdev
	[[ -z $name ]] && return 1
	if isDir "$name"; then
		loopdev=$(deviceof "$name")
	elif [[ "${name:0:1}" = / ]]; then
		loopdev=$name
	else
		loopdev=/dev/loop${name#loop}
	fi
	[[ -b $loopdev ]] || abortDevError NOBLKDEV "$loopdev"
	[[ $loopdev = (/dev/(mapper/)#)#loop(#b)([0-9]##)p([0-9]##) ]] && loopdev=/dev/loop$match[1]
	losetup $loopdev -O BACK-FILE --noheadings
}

#comp+=(image='')
function imageMount()
{
	local img dir var dev
	if [[ $# -ne 2 ]]; then
		echo Usage: $0 imageFile mountDir
		return 1
	fi
	img=$1 ; dir=$2
	if [[ ! -f $1 ]]; then
		techo -c lred "$1: file not found"
		return 1
	fi
	isDir -m $dir || return 1
	if dev=$(isDirMounted $dir); then
		if var=$(isLoop $dev); then
			var=$(imageof $var)
			[[ $? -ne 0 || $var == $img ]] && return 0
			techo -c warn "$dir already mounted ($dev $var)"
			confirm "Unmount $dev" || return
			unloop $dev || abortDevError MNTBUSY "$dir ($dev)"
		else
			techo -c warn "$dir already mounted ($dev)"
			confirm "Unmount $dev" || return
			deviceUnmount $dev || abortDevError MNTBUSY "$dir ($dev)"
		fi
	fi
	run -s mount -o loop $img $dir
}

function loop()
{
	local cmd=$1 img dir var dev
	[[ -n $cmd ]] || return 1
	shift
	case $cmd in
	mount)
		imageMount "$@"
	;;
	*)
		imageof $1
		mntof $1
	;;
	esac
}

# Added 2019-03-01 15:48
function unloop()
{
	local loopNum devLoop devList img
	zparseopts -D -E -M -- i:=img -img:=i
	if devLoop=$(isLoop $1) && [[ -z $img ]]; then
		loopNum=${devLoop#/dev/loop}
		[[ $loopNum = [0-9]## ]] || loopNum=${devLoop#/dev/mapper/loop}
	else
		[[ -n $img ]] && img=$img[2] || img=$1
		[[ -b $devLoop ]] && loopNum=${devLoop#/dev/loop}
		[[ "$devLoop" =~ "loop([0-9]*)" ]] || return 1
		loopNum=$match[1]
	fi
	devList=(${devLoop} /dev/mapper/loop${loopNum}p*(N) ${devLoop}p*(N))
	run deviceUnmount $devList || return
	sudo kpartx -d $devLoop
	[[ -b $devLoop ]] && sudo losetup -d $devLoop
	return 0
}

# Added 2019-02-26 14:17
function ptablecp()
{
	local tblbkp src dest
	src=$1
	dest=$2
	shift 2
	[[ -n $src && -n $dest ]] || { echo "need at least 2 arguments" ; return 1 }
	#tblbkp="$(getfilename $dest).bkup"
	# sudo sfdisk -d $dest | tee $dest.ptbl
	sudo sfdisk -d $src | sudo sfdisk $dest
}

# Added 2019-02-14 09:24
# Updated 2019-02-25 14:47
function sdd()
{
	local devin devout bs quiet status ioffset ooffset offset args dryrun
	zparseopts -M -D - -dry=dryrun q=quiet -quiet=q -bs:=bs \
		-ioffset:=ioffset -ooffset:=ooffset -offset:=offset

	[[ $# -ge 2 ]] || return 1

	include -r file || abort 1 
	devin=$1
	devout=$2
	if [[ ${devin:0:2} == 'f:' ]]; then
		devin=${devin:2}
		[[ -f $devin ]] || abort 127 "$devin: file not found"
	elif [[ ! -f $devin ]]; then
		devin=$(findDev $devin) || abort 127 "$devin: device not found"
	fi

	if [[ ${devout:0:2} == 'f:' ]]; then
		devout=${devout:2}
	elif devout=$(isDevice $devout); then
		[[ -b $devout ]] || abort 127 "$devout: device not found"
	fi

	if [[ -f $devout ]]; then
		confirm "Output file $C[warn]\"$devout\"$_C exists.\n$C[warn]Overwrite" || cancel
	fi
	
	shift 2

	args=("$@")
	if [[ -n $offset ]]; then
		args+=("skip=$offset[2]")
		args+=("seek=$offset[2]")
	else
		[[ -n $ioffset ]] && args+=("skip=$ioffset[2]")
		[[ -n $ooffset ]] && args+=("seek=$ooffset[2]")
	fi

	techo "${C[b]}in=$devin => out=$devout$C_"
	#@TODO techo watch -n5 'killall -USR1 dd'
	##oflag=dsync 
	if [[ -z $quiet ]]; then
		args+=('status=progress')
	fi
	args+=('conv=notrunc,fdatasync')
	bs=${bs[2]:-64M}
	run $quiet -s dd "if=$devin" "of=$devout" "bs=$bs" "${args[@]}"
	_sync
}

# Added 2019-06-03 09:00
function ejectSD()
{
	isSD $SDDEV || findSD -d || return 0
	diskUnmount -e $SDDEV
}
