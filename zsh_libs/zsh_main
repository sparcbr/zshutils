VERSION=1.0.5
[[ "$SUDO_USER" != "" ]] && export HOME=~$SUDO_USER
export PATH=$PATH:$HOME/bin
export NOSND=1
[[ -z "$ZSH_LIBS" ]] && export ZSH_LIBS=${$(realpath $0):h}

function techo() {
	local c args nonl
    zparseopts -M -D - c:=c n=nonl
	[[ -n "$nonl" ]] && args=('-n')
	[[ -z $TTY || ! -c $TTY ]] && TTY=/dev/null  # stdout
	if [[ -n "$c" ]]; then
		c="$c[2]"
		[ -z "${C[$c]}" ] && type colorSet >/dev/null && colorSet $c
		while [[ ${1[1]} = '-' ]]; do
			args+=("$1")
			shift
		done
		echo -e $args "${C[$c]}${@}$C_" >$TTY
	else
		echo -e $args "$@" >$TTY
	fi
}

function cancel() { abort 130 "Cancelled $@" }

function abort() {
	local cod=$1
	[ $# -ge 1 ] && shift
	[ $# -ge 1 ] && techo -c lred "$@"
	[[ "$ABORT" -gt 0 ]] && $ABORT $cod "$@" 
	{ [ -z "$EXIT" ] || [ $EXIT -gt 0 ] } && [[ ! -o interactive ]] && exit $cod
	throw $cod
	return $cod
}
# spaces 
function explode()
{
	local _sep=${2:-${sep:-" "}}
	s=(${(pqs/$_sep/)${1//[[:space:]]##/\x20}})
	[ -n "$3" ] && echo $s[$3] || echo "${s[@]}"
}

function debug()
{
	local cmd=$1
	shift
    set -x
    $cmd "$@" >$TTY
    set +x
}

function vartype() {
	print -rl -- ${(tP)1}
}

# Set info for a lib
function lib_set_info()
{
    local fname=${(U)1}
	typeset -g ZSH_${fname}_VER=$2
	typeset -Ag ZSH_${fname}_INFO
	shift 2
	#@TODO clone_assoc_array ZSH_${fname}_INFO _temp_aarray
	set -A ZSH_${fname}_INFO ${(kv)_temp_aarray}
	#for key val in ${(kv)_temp_aarray}; do
	#	echo "$key -> $val"
	#	ZSH_${fname}_INFO[$key]=$val
	#done
	unset _temp_aarray
}

function getmime()
{
	file -bi $(realpath "$@") | awk -F';' '{print $1}'
}

function isScript()
{
	local mime=$(getmime "$@")
	[[ "$mime" = "text/x-shellscript" ]] || {
		[[ "$mime" = "text/plain" ]] && head -n1 "$*" | grep -q '^VERSION'
	}
}

# Include a zsh lib
function include()
{
	local name ver lpath lazyload prefix required force str
	zparseopts -D -M - l=lazyload p:=lpath -path:=l r=required -required=r f=force

	name="$1"
	if [[ -n "$lpath" ]]; then
		lpath="${lpath[2]}"
	else
		lpath="$ZSH_LIBS/zsh_$name"
	fi
		
	[[ -n $required ]] && required=1 || required=0

	if [[ ! -f "$lpath" ]]; then
		techo "[\e[1;101mFAIL\e[0m] \e[91m$lpath not found\e[0m"
		if [[ $required -eq 1 ]]; then
			techo "\e[1;91mRequired $name not loaded\e[0m"
			[[ ! -o interactive ]] && abort 127
		fi
		return 127
	fi

	prefix="ZSH_${(U)name}"
    ver="${prefix}_VER"
    if [[ -z ${(P)ver} ]] || [[ -n "$force" ]]; then
		if ! isScript $lpath; then 
			techo "\e[91m$lpath is not a script\e[0m"
			if [[ $required -eq 1 ]]; then
				[[ ! -o interactive ]] && abort 2
				return 2
			fi
			return 1
		fi
		if [ -n "$lazyload" ]; then # @TODO
			return 0
		else
			#[[ -o interactive ]] && 
			techo -n "Including $name ($lpath)"
			source "$lpath"
			ret=$?
			if [ $ret -eq 0 ]; then
				typeset -Ag _temp_aarray
				_temp_aarray[ver]="$VERSION"
				_temp_aarray[path]="$lpath"
				_temp_aarray[required]=${required:-0}
				lib_set_info $name $VERSION
				#[[ -o interactive ]] &&
				techo " [\e[92m$VERSION\e[0m]"
			else
				local line
				techo " [\e[1;101mFAIL\e[0m]"
				if [[ $required -eq 1 ]]; then
					techo "\n\e[1;92mRequired $name not loaded\e[0m"
					[[ ! -o interactive ]] && abort 2
					return 2
				fi
				return $ret
			fi
		fi
    fi
}

lib_set_info main $VERSION # "include" itself
