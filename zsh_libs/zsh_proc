VERSION=1.0.2
#lazyload=p,k

# Process handling. Stuff like pid, kill, lsof, etc...

[[ -v comp ]] || typeset -g -a comp

function cwdof()
{
	local arg
	for arg; do
		if [[ $arg != [0-9]# ]]; then
			p=$(pidof -s $arg) || { techo -c warn "$arg not found"; continue }
		else
			p=$arg
		fi
		#ls -ld /proc/$p/cwd 2>/dev/null
		getfullpath /proc/$p/cwd 2>/dev/null
	done
}

[[ "$(typeOf p)" == 'alias' ]] && unalias p

comp+=(p=ps)
function p()
{
	local kern select search user pid ppid tty cmd
	local cols appendcols args

	[[ -o interactive ]] || { command ps "$@" ; return }
	zparseopts -D -M - c:=cmd k=kern u::=user t::=tty \
		p:=pid P:=ppid -ppid:=P o:=cols O:=appendcols
	
	# # # # # # #
	# selection #
	# # # # # # #
	if [[ -n $user ]]; then
		(($#user[1] > 2)) && user=(-u ${user[1]:2}) || user[2]=(${UID:-$USER})
	fi

	if (($#tty)); then
		(($#tty[1] > 2)) || tty[2]=($TTY)
	fi

	(($#cmd)) && cmd=(-C "$(getfilename $=cmd[2])")
	if [[ -z $pid && $1 == [0-9]## ]]; then
		pid=(-p $1)
		shift
	elif ((! $#cmd )) && [[ ${1:0:1} = [[:alpha:]_]## ]]; then
		cmd=(-C $1)
		shift
	fi
	#if in_array args '-C'; then
	#fi
	select=($user $pid $ppid $tty $cmd)
	# hide kernel threads by default, if no other select options are given
	if ((!$#kern && !$#select)); then
		args+=(--ppid 2 -p 2 --deselect)
	else
		args+=($select)
	fi

	args+=("$@")

	##  ##  ##
	# output #
	##  ##  ##
	if [[ -n $cols ]]; then
		cols=($(explode "$cols[2]" ','))
		#elif in_array args --any '-o,-O'; then
	else
		cols=(pid ppid %cpu stat cmd)
		[[ -n $user[2] ]] && cols+=() # euid if not -u or -u $x with $x != $UID
	fi
	if [[ -n $appendcols ]]; then
		cols+=($(explode "$appendcols[2]" ','))
		#elif in_array args --any '-o,-O'; then
	fi
	args+=(-o "${(uj.,.)cols}")

	run command ps $args
}

function waitOnPids()
{
	local pids=($@)
	local integer i err=0
	while [[ $#pids -gt 0 ]]; do
		sleep 0.4
		for ((i=1 ; i <= $#pids; )) do
			if kill -0 $pids[$i] 2>/dev/null; then
				((i++))
			else
				wait $pids[$i] || ((err++))
				pids[$i]=()
			fi
		done
	done
	return $err
}

# If not given a pid, run command in background
# Check command (-c): run periodically a command until main program ends
function waitPid()
{
	local cmd checkCmd delay force
	integer ret=0 pid killSent=0 retCheck=2
	zparseopts -D - c:=checkCmd d:=delay f=force
	pid=$1
	[[ -n $checkCmd ]] && checkCmd=(${(z)checkCmd[2]})
	delay=${delay[2]:-1}
	while kill -0 $pid 2>/dev/null; do
		sleep $delay
		if (($#checkCmd)); then
			if ((killSent > 3)); then
				if (($#force)) || {
					[[ -o interactive ]] && confirm "Force kill $cmd"
				}; then
					kill -9 $pid && break
				else
					killSent=0
				fi
			fi
			$checkCmd ; ret=$?
			if ((retCheck && ret > retCheck)); then
				techo -c warn "Killing $cmd[1] ($pid)"
				kill $pid ; sleep 1
				((killSent++))
			fi
		fi
	done
	wait $pid
}

function dirtyMem()
{
	local name number
	while read name number; do
		if [[ $name = Dirty: ]]; then
			toBytes -k "$number"
			break
		fi
	done < /proc/meminfo
}

# Added 2019-07-01 16:59
function k()
{
	local kopts arg args forceProcName
	for arg; do
		if [[ ${arg:0:1} = '-' ]] && [[ $arg = -[0-9]## || ${arg:0:4} = '-sig' ]]; then
			kopts+=($arg)
		else
			args+=($arg)
		fi
	done
	set - $args
	zparseopts -M -D - f:=forceProcName
	if [[ $1 = [0-9]## ]]; then
		run -S kill $kopts "$@"
	else
		run -S killall $kopts "$@" #@TODO || ps -S "$@"
	fi
}

# Added 2019-04-04 15:20
function procmon()
{
	local prog=$1 timeout=5
	while true; do
		pid=$(pidof $prog)
		[[ -z $pid ]] && continue || e $pid
		sleep $timeout
		pid2=$(pidof $prog)
		[[ -z $pid2 ]] && continue || e $pid2
		[[ $pid -eq $pid2 ]] && kill $pid
		sleep 1
	done
}
