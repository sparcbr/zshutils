VERSION=1.0.3
#lazyload=debug,fstack,array_dump,dbgecho
alias dbg='debug -r'
FUNCNEST=50

[[ -v comp ]] || typeset -ga comp
[[ -v _dbg_flvl ]] || typeset -gA _dbg_flvl
integer DEBUG=${DEBUG:-0}
#zmodload zsh/zprof && zprof
#TODO: kcachegrind, https://github.com/raboof/zshprof
_dbg_def_lvl=4

function _dbg_PS()
{
	local lvl c
	lvl=${1:-$_dbg_def_lvl}
	# default: '+%N:%i'
	if ((DEBUG > 1)); then
		PS4=$'\\\011%D{%s%6.}\011%x\011%I\011%N\011%e\011'
	else
		#@TODO add ts=%D{%s.%.}, %=(ts - startTs)
	#	PS4="%(${lvl}e,%F{8},%F{2})+%D{%s.%.}>%e<%1x:%I><%N:%i>%f "
		PS4="%(${lvl}e,%F{8},%F{2})+%D{%s.%.}>%F{%e}%e%F{3}<%1x:%I>%F{4}<%N:%i>%f "
	fi
	export PS4
}

_dbg_PS

function _dbg_trap()
{
	#confirm || setopt errexit
	#(($2==0 && _dbg_flvl[$1] <= DEBUG)) && [[ -o xtrace ]] && {
	if [[ -o xtrace ]] && (((_dbg_flvl[$1] <= DEBUG))); then
		set +x
	fi
	#techo $PS4 $ZSH_DEBUG_CMD
}
#trap '_dbg_trap $0 $LINENO' DEBUG
function _dbg_fcfg()
{
	#((_dbg_flvl[$1] <= DEBUG)) && {
		set +x
	#}
}

function _dbg_funcOnOff()
{
	integer lvl=$1
	shift
	[[ -v _dbg_flvl ]] || { techo -c err "_dbg_flvl undefined"; return 1 }
	if (($#)); then
		_dbg_flvl[$1]=$lvl
		#(($2>DEBUG)) && typeset -tf $1 || typeset -Tf $1
		if ((lvl)); then
			typeset -Tf "$@"
		else
			typeset +Ttf "$@"
		fi
	fi
}

function _test()
{
	local f="$1" test_f l
	[[ $# -eq 0 ]] && abort 1 "Missing argument"
	test_f="_test_$f"
	type $test_f || abort 127 "Function \"$test_f\" not found"
	$test_f && techo "$f $OK" || {
		techo "$f $FAIL $?"
		#fstack 3
	}
}

function _test_explode()
{
	local f='explode' a=()
	$f 'a;b' ';'
	[[ ${a[1]} = 'a' && ${a[2]} = 'b' ]] || return $LINENO
	a=($($f 'a  b ;; b' ';'))
	[[ ${a[1]} = 'a  b ' && -z ${a[2]} && ${a[3]} = ' b' ]] || return $LINENO
	a=($($f 'a  b ;; b' ' '))
	[[ -n $a && ${a[1]} = 'a' && ${a[2]} = 'b' && ${a[3]} = ';;' && ${a[4]} = 'b' ]] || return $LINENO
	return true
}

function debug()
{
	local _cmd _data _type _types keep _func debug alias run script
	integer ret
	zparseopts -D -M - k=keep D:=debug -alias:=alias r=run

	#@TODO source /usr/local/share/zshdb/dbg-trace.sh
	# _Dbg_debugger
	#typeset -Tf debug
	for _cmd; do
		_types=($(typeOf -a $_cmd)) || { run=1; _cmd=$1; break }
		for _type in $_types; do
			case $_type in
				alias)
					local tmp=$(inAlias -f $_cmd) || continue
					_func+=($tmp)
					;;
				command)
					;;
				function)
					if [[ -v functions[$_cmd] ]]; then
						_func+=($_cmd)
					fi
					;;
				script) #shell script
					script=$_cmd
					break
					;;
				*) ;;
			esac
		done
		[[ -n $run ]] && break
	done
	(($#_func)) && _dbg_funcOnOff 9 $_func

	if (($#run)); then
		#_data=$($_cmd "$@" 2>&1 | egrep "^\+$_cmd:|[^+]")
		#_data=$($_cmd "$@" 2>&1) ; ret=$?
		#(( $#_data )) && colorify -d $_cmd <<<$_data
		#ret=$pipestatus
		shift
		if [[ -n $script ]]; then
			DEBUG=1 $script
			ret=$?
		else
			{
				$_cmd "$@" #|& colorify -D $_cmd
			} always {
				ret=$?
				if catch '*'; then
					techo "CAUGHT: $CAUGHT"
					[[ $CAUGHT == <-> ]] && ret=$CAUGHT || ret=2
				fi
			}
		fi
	fi

	((! $#keep && $#_func)) && _dbg_funcOnOff 0 $_func
	set +x
	return $ret
}

# Say the file, line number and optional message for debugging
# Inspired by bash's `caller` builtin
# Thanks to https://unix.stackexchange.com/a/453153/143394
function fstack()
{
	# shellcheck disable=SC2154  # undeclared zsh variables in bash
	if [ -n "$BASH_VERSION" ]; then
		local file=${BASH_SOURCE[1]} func=${FUNCNAME[1]} line=${BASH_LINENO[0]}
	else  # zsh
		emulate -L zsh  # because we may be sourced by zsh `emulate bash -c`
		# $funcfiletrace has format:  file:line
		#local file=${funcfiletrace[1]%:*} line=${funcfiletrace[1]##*:}
		#local func=${funcstack[2]}
		#[[ "$func" =~ '/' ]] && func=source  # $func may be filename. Use bash behaviour
		# techo "${file##*/}:$func:$line $*"
		#print -l -- funcfiletrace $funcfiletrace - funcsourcetrace $funcsourcetrace - funcstack $funcstack - functrace $functrace
		local integer n=$#functrace i=${1:-0}
		# By default, command line entries are hidden.
		# Comment next line to always show command line entry.
		[[ $functrace[$n] == $SHELL:* ]] && ((n>1 && n--))
		for ((i++; i<=n; i++)); do
			techo -c lred $functrace[$i]$_C in $C[warn]$funcfiletrace[$i]
		done
	fi
}

function array_dump()
{
	local key val _type

	[[ $1 == '-n' ]] && { integer ln; shift }
	[[ -v $1 ]] || abort 127 'Not a variable'

	_type="$(vartype $1)"
	case $_type in
	  association*)
		techo -c head "dump of \"$1\" ($_type size: ${(P)#1}):"
		for key in ${(Pk)1}; do
			techo -r - ${(q)key} '=>' ${(q)${(P)1}[$key]}
		done
		;;
	  array*)
		techo -c head "dump of \"$1\" ($_type size: ${(P)#1}):"
		for val in "${(P@)1}"; do
			techo -r - ${ln+$((++ln)): }${(q)val}
		done
		;;
	  *)
		techo -c err "\"$1\": not an array." ;;
	esac
}

function dbgecho()
{
	((DEBUG)) && techo "$@"
}
